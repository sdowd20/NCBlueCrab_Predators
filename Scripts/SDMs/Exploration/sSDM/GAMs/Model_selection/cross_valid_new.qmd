---
title: "Tuning2"
format: html
editor: visual
---

#### Load packages, functions, and datasets

```{r}
#Load packages and functions 
packages <- c("ggplot2", "tidyverse", "lubridate", "sf", "sp", "dplyr", "rnaturalearth", "readr", "readxl", "spatialEco", "rstatix", "viridis", "BBmisc", "corrplot", "mgcv", "GGally", "gjam", "report")
invisible(lapply(packages, library, character.only= TRUE))

library(lmtest)
library(countreg)
library(gridExtra)
library(ggplot2)
library(MASS)
library(countreg)
library(performance)
library(tidymodels)
library(tidyflow)
library(devtools)
library(rpart.plot)
library(vip)
library(baguette)
library(ranger)

standard_theme <- theme_bw() + theme(panel.border = element_rect(fill=NA, colour = "black")) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.text.align= 0, legend.title= element_text(size = 12), legend.text = element_text(size= 10), axis.text=element_text(size=10), axis.title=element_text(size=12))

##Count dataset 
df_count <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE/CPUE_grid_count_avg_edt.csv")  
df_count <- df_count %>% dplyr::select(-c(...1, CPUE, CPUE_stdzd, mean_CPUE, mean_CPUE_stdzd)) #need to remove or R will get confused 
df_count$Speciescommonname <- gsub(" ", "_", df_count$Speciescommonname)

#Pivot-wider datasets: 
##Count dataset wide 
df_count_wide <- df_count %>% filter(Survey %in% "P915") %>% ungroup() %>% pivot_wider(names_from = "Speciescommonname", values_from = "avg_count") %>% drop_na()

#Form train/testing datasets by dividing 80% 20% 
set.seed(777)
##Randomly split data in R
sample_size = floor(0.8*nrow(df_count_wide)) #take 80% of rows, # is same b/w dfs

##Poisson model
picked = sample(seq_len(nrow(df_count_wide)),size = sample_size) 
df_count_wide_test = df_count_wide[-picked,]
df_count_wide_train = df_count_wide[picked,]
```

```{r}
#Visualizing GAMs
#visualization tutorial: https://noamross.github.io/gams-in-r-course/chapter2

#1) Plot():
#The plots generated by mgcv's plot() function are partial effect plots. That is, they show the component effect of each of the smooth or linear terms in the model, which add up to the overall prediction.
#partial residuals: difference b/w partial effect and the data after all other partial effects have been accounted for
#standard errors: 95% CI for mean shape of effect

#2) gam.check()
#Console output: reports full convergence. If the model hasn't converged, the results are likely not correct.
  #Basis checking results: small p-values indicate residuals are not randomly distributed (likely not enough basis fncs)
#Diagnostic plots:
  #Q-Q plot: model residuals compared to normal distribution, aim is to have close to a straight line
  #Histogram of residuals: expect symmetric bell-shape
  #Residual values vs. linear predictors: except even distribution around 0
  #Response vs. fitted values: perfect model would form a straight line, cluster around 1:1 line

#3) concurvity:
#Even if two variables aren't collinear, they may have concurvity, meaning that one may be a smooth curve of another (parabola), if you use two predictors in model that have concurvity than we get smooths with wild confidence intervals as shown in middle and right plots
#concurvity(tw_k10_2, full = TRUE) #overall concurvity for each smooth, examine worst case and if value is high (> 0.8), you need to examine model closely and try full= FALSE
#concurvity(tw_k10_2, full = FALSE) #matrices of pairwise concurvities
```

#### Cross-validation

```{r}
#Load functions and create formula 
library(gtools)

pastePerm<- function(row, names){
  keep<- which(row==1)
  if(length(keep)==0){
    return('1')
  }else{
    return(paste(names[keep],collapse='+'))
  }
}
my_sqrt <- function(var1){
  sqrt(var1) #take square root of variable 
} #construct model formulas 

dredgeform<- function(pred, covars, alwaysIn=''){ #always in is set to empty string
  p<- length(covars) #number of independent variables
  perm.tab<- permutations(2, p, v=c(0,1), repeats.allowed=T) #for different combinations of predictor variables
  myforms<- NULL #store formulas 
  for(j in 1:nrow(perm.tab)){
    myforms[j]<- pastePerm(perm.tab[j,], covars) #function above
  }
  myforms<- paste0(pred, '~',myforms) #predicted variable and formula
  return(myforms)
}

allformulas <- dredgeform(pred = "red_drum", covars = c("s(avg_depth)", "s(avg_ssal)", "s(avg_stemp)", "s(avg_sdo)", "s(SAVDist_km)", "s(InletDist_km)", "s(NoFishRest)", "s(atlantic_menhaden)", "s(atlantic_croaker)", "s(southern_flounder)", "s(spot)", "s(black_drum)", "factor(FishingAll_num)", "factor(Sedsize_common)"))

allformulas_log <- dredgeform(pred = "log(red_drum+1)", covars = c("s(avg_depth)", "s(avg_ssal)", "s(avg_stemp)", "s(avg_sdo)", "s(SAVDist_km)", "s(InletDist_km)", "s(NoFishRest)", "s(atlantic_menhaden)", "s(atlantic_croaker)", "s(southern_flounder)", "s(spot)", "s(black_drum)", "factor(FishingAll_num)", "factor(Sedsize_common)"))

allformulas_pow <- dredgeform(pred = "red_drum^0.25", covars = c("s(avg_depth)", "s(avg_ssal)", "s(avg_stemp)", "s(avg_sdo)", "s(SAVDist_km)", "s(InletDist_km)", "s(NoFishRest)", "s(atlantic_menhaden)", "s(atlantic_croaker)", "s(southern_flounder)", "s(spot)", "s(black_drum)", "factor(FishingAll_num)", "factor(Sedsize_common)"))
```

```{r}
#Gaussian
compare_var_gaus <- as.data.frame(matrix(ncol = 2, nrow = 0))
colnames(compare_var_gaus) <- c("formula", "AIC")
for (i in 1:length(allformulas)) {
model_gaus <- gam(as.formula(allformulas[i]), data=df_count_wide_train)
compare_var_gaus[i, 1] <- allformulas[i]
compare_var_gaus[i, 2] <- AIC(model_gaus)
}

#Gaussian w/ log + 1 transformation
compare_var_gaus_log <- as.data.frame(matrix(ncol = 2, nrow = 0))
colnames(compare_var_gaus_log) <- c("formula", "AIC")
for (i in 1:length(allformulas_log)) {
model_gaus_log <- gam(as.formula(allformulas_log[i]), data=df_count_wide_train)
compare_var_gaus_log[i, 1] <- allformulas_log[i]
compare_var_gaus_log[i, 2] <- AIC(model_gaus_log)
}

#Gaussian w/ power transformation
compare_var_gaus_pow <- as.data.frame(matrix(ncol = 2, nrow = 0))
colnames(compare_var_gaus_pow) <- c("formula", "AIC")
for (i in 1:length(allformulas_pow)) {
model_gaus_pow <- gam(as.formula(allformulas_pow[i]), data=df_count_wide_train)
compare_var_gaus_pow[i, 1] <- allformulas[i]
compare_var_gaus_pow[i, 2] <- AIC(model_gaus_pow)
}

#Tweedie
compare_var_tw <- as.data.frame(matrix(ncol = 2, nrow = 0))
colnames(compare_var_tw) <- c("formula", "AIC")
for (i in 1:length(allformulas)) {
model_tw <- gam(as.formula(allformulas[i]), data=df_count_wide_train)
compare_var_tw[i, 1] <- allformulas[i]
compare_var_tw[i, 2] <- AIC(model_tw)
}

#Tweedie w/ power transformation
compare_var_tw_pow <- as.data.frame(matrix(ncol = 2, nrow = 0))
colnames(compare_var_tw_pow) <- c("formula", "AIC")
for (i in 1:length(allformulas_pow)) {
model_tw_pow <- gam(as.formula(allformulas_pow[i]), data=df_count_wide_train)
compare_var_tw_pow[i, 1] <- allformulas_pow[i]
compare_var_tw_pow[i, 2] <- AIC(model_tw_pow)
}

compare_var_gaus %>% arrange(AIC) %>% .[1,1]
compare_var_gaus_log %>% arrange(AIC) %>% .[1,1]
compare_var_gaus_pow %>% arrange(AIC) %>% .[1,1]
compare_var_tw %>% arrange(AIC) %>% .[1,1]
compare_var_tw_pow %>% arrange(AIC)

###run these too! 
#Negative binomial 
compare_var_nb <- as.data.frame(matrix(ncol = 2, nrow = 0))
colnames(compare_var_nb) <- c("formula", "AIC")
for (i in 1:length(allformulas)) {
model_nb <- gam(as.formula(allformulas[i]), data=df_count_wide_train)
compare_var_nb[i, 1] <- allformulas[i]
compare_var_nb[i, 2] <- AIC(model_nb)
}

#Poisson
compare_var_pois <- as.data.frame(matrix(ncol = 2, nrow = 0))
colnames(compare_var_pois) <- c("formula", "AIC")
for (i in 1:length(allformulas)) {
model_pois <- gam(as.formula(allformulas[i]), data=df_count_wide_train)
compare_var_pois[i, 1] <- allformulas[i]
compare_var_pois[i, 2] <- AIC(model_pois)
}

compare_var_gaus %>% arrange(AIC) %>% .[1,1]
compare_var_gaus_log %>% arrange(AIC) %>% .[1,1]
compare_var_gaus_pow %>% arrange(AIC) %>% .[1,1]
compare_var_tw %>% arrange(AIC) %>% .[1,1]
compare_var_tw_pow %>% arrange(AIC)

nb <- gam(red_drum^0.25~s(avg_stemp)+s(SAVDist_km)+s(InletDist_km)+s(southern_flounder)+s(black_drum)+factor(FishingAll_num)+factor(Sedsize_common), family= "nb", data= df_count_wide_train)

"red_drum~s(SAVDist_km)+s(InletDist_km)+s(black_drum)+factor(FishingAll_num)"
"log(red_drum+1)~s(SAVDist_km)+s(InletDist_km)+s(southern_flounder)+s(black_drum)+factor(FishingAll_num)+factor(Sedsize_common)"
"red_drum~s(avg_stemp)+s(SAVDist_km)+s(InletDist_km)+s(southern_flounder)+s(black_drum)+factor(FishingAll_num)+factor(Sedsize_common)"
"red_drum~s(SAVDist_km)+s(InletDist_km)+s(black_drum)+factor(FishingAll_num)"
"red_drum^0.25~s(avg_stemp)+s(SAVDist_km)+s(InletDist_km)+s(southern_flounder)+s(black_drum)+factor(FishingAll_num)+factor(Sedsize_common)"
```

```{r}
model_gaus_cv <- gam(red_drum~s(SAVDist_km)+s(InletDist_km)+s(black_drum)+factor(FishingAll_num), data=df_count_wide_train)
summary(model_gaus_cv)
gam.check(model_gaus_cv)
plot(model_gaus_cv, all.terms= TRUE, residuals= TRUE, pch=1, cex=1, shade= TRUE, shade.col= "lightblue")

model_gaus_log_cv <- gam(log(red_drum+1)~s(SAVDist_km)+s(InletDist_km)+s(southern_flounder)+s(black_drum)+factor(FishingAll_num)+factor(Sedsize_common), data=df_count_wide_train)
summary(model_gaus_log_cv)
gam.check(model_gaus_log_cv)
plot(model_gaus_log_cv, all.terms= TRUE, residuals= TRUE, pch=1, cex=1, shade= TRUE, shade.col= "lightblue")

model_gaus_pow_cv <- gam(red_drum~s(avg_stemp)+s(SAVDist_km)+s(InletDist_km)+s(southern_flounder)+s(black_drum)+factor(FishingAll_num)+factor(Sedsize_common), data= df_count_wide_train)
summary(model_gaus_pow_cv)
gam.check(model_gaus_pow_cv)
plot(model_gaus_pow_cv, all.terms= TRUE, residuals= TRUE, pch=1, cex=1, shade= TRUE, shade.col= "lightblue")

model_tw_cv <- gam(red_drum~s(SAVDist_km)+s(InletDist_km)+s(black_drum)+factor(FishingAll_num), family= tw(link= "log"), data= df_count_wide_train)
summary(model_tw_cv)
gam.check(model_tw_cv)
plot(model_tw_cv, all.terms= TRUE, residuals= TRUE, pch=1, cex=1, shade= TRUE, shade.col= "lightblue")

model_tw_pow_cv <- gam(red_drum^0.25~s(avg_stemp)+s(SAVDist_km)+s(InletDist_km)+s(southern_flounder)+s(black_drum)+factor(FishingAll_num)+factor(Sedsize_common), family= tw(link= "log"), data= df_count_wide_train)
summary(model_tw_pow_cv)
gam.check(model_tw_pow_cv)
plot(model_tw_pow_cv, all.terms= TRUE, residuals= TRUE, pch=1, cex=1, shade= TRUE, shade.col= "lightblue")

AIC(model_gaus_cv, model_gaus_log_cv, model_gaus_pow_cv, model_tw_cv, model_tw_pow_cv, nb)

#model_tw_pow_cv
#model_gaus_log_cv
#model_tw_cv
```

```{r}
r2_func <-function(preds,actual){ 
  return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}

RMSE_func <- function(preds, actual){
  return(sqrt(mean((actual - preds)^2)))
}

model_gaus_cv_pred <- predict(model_gaus_cv, newdata = df_count_wide_test, type = "response")
 pois <- as.data.frame(matrix(ncol =3))
    pois$V1 <- "pois"
    pois$V2 <- r2_func(model_gaus_cv_pred, df_count_wide_test$red_drum)
    pois$V3 <- RMSE_func(model_gaus_cv_pred , df_count_wide_test$red_drum)
colnames(pois) <- c("model_type", "R2", "RMSE")

model_gaus_log_cv_pred <- predict(model_gaus_log_cv, newdata = df_count_wide_test, type = "response")
 pois <- as.data.frame(matrix(ncol =3))
    pois$V1 <- "pois"
    pois$V2 <- r2_func(model_gaus_log_cv_pred, log(df_count_wide_test$red_drum + 1))
    pois$V3 <- RMSE_func(model_gaus_log_cv_pred, log(df_count_wide_test$red_drum) + 1)
colnames(pois) <- c("model_type", "R2", "RMSE")

model_gaus_pow_cv_pred <- predict(model_gaus_pow_cv, newdata = df_count_wide_test, type = "response")
 pois <- as.data.frame(matrix(ncol =3))
    pois$V1 <- "pois"
    pois$V2 <- r2_func(model_gaus_pow_cv_pred, df_count_wide_test$red_drum^0.25)
    pois$V3 <- RMSE_func(model_gaus_pow_cv_pred, df_count_wide_test$red_drum^0.25)
colnames(pois) <- c("model_type", "R2", "RMSE")

model_tw_pow_cv_pred <- predict(model_tw_pow_cv, newdata = df_count_wide_test, type = "response")
 pois <- as.data.frame(matrix(ncol =3))
    pois$V1 <- "pois"
    pois$V2 <- r2_func(model_tw_pow_cv_pred, df_count_wide_test$red_drum^0.25)
    pois$V3 <- RMSE_func(model_tw_pow_cv_pred, df_count_wide_test$red_drum^0.25)
colnames(pois) <- c("model_type", "R2", "RMSE")
```

```{r}
tw_k10_2 <- gam(red_drum~ s(SAVDist_km) +s(InletDist_km)+ s(atlantic_menhaden)+factor(FishingAll_num)+factor(Sedsize_common), family= tw(link= "log"), data= df_count_wide_train)
summary(tw_k10_2)
gam.check(tw_k10_2)

tw_k10_3 <- gam(log(reddrum + 1)~ s(SAVDist_km) +s(InletDist_km)+ s(atlanticmenhaden)+factor(FishingAll_num)+factor(Sedsize_common), family= tw(link= "log"), data= df_count_wide_train)
summary(tw_k10_3)
gam.check(tw_k10_3)

gaus_1 <- gam(log(reddrum + 1)~ s(SAVDist_km) +s(InletDist_km)+ s(atlanticmenhaden)+factor(FishingAll_num)+factor(Sedsize_common), data= df_count_wide_train)
summary(gaus_1)
gam.check(gaus_1)

gaus_2 <- gam(reddrum^0.25 ~ s(SAVDist_km) +s(InletDist_km)+ s(atlanticmenhaden)+factor(FishingAll_num)+factor(Sedsize_common), data= df_count_wide_train)
summary(gaus_2)
gam.check(gaus_2)

df_count_wide_train$reddrum^0.25

AIC(tw_k10, tw_k10_2,tw_k10_3, gaus_1, gaus_2, gaus_3)

plot(tw_k10_2, all.terms= TRUE, residuals= TRUE, pch=1, cex=1, shade= TRUE, shade.col= "lightblue")

gaus_3 <- gam(reddrum^0.25 ~ s(avg_stemp) + s(avg_sdo) + s(avg_ssal) + s(InletDist_km)+ s(atlanticmenhaden)+factor(FishingAll_num)+factor(Sedsize_common), data= df_count_wide_train)
summary(gaus_3)


```

```{r}

```
