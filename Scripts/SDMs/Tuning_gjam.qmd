---
title: "Tuning_gjam"
format: html
editor: visual
---

#### Load packages, functions and datasets

```{r}
packages <- c("ggplot2", "tidyverse", "lubridate", "sf", "sp", "dplyr", "rnaturalearth", "readr", "readxl", "spatialEco", "rstatix", "viridis", "BBmisc", "corrplot", "mgcv", "GGally", "gjam")
invisible(lapply(packages, library, character.only= TRUE))

standard_theme <- theme_bw() + theme(panel.border = element_rect(fill=NA, colour = "black")) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.text.align= 0, legend.title= element_text(size = 12), legend.text = element_text(size= 10), axis.text=element_text(size=10), axis.title=element_text(size=12))

#Count dataset 
df_count <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE/CPUE_grid_count_avg_edt.csv")  
df_count <- df_count %>% dplyr::select(-c(...1, CPUE, CPUE_stdzd, mean_CPUE, mean_CPUE_stdzd))
colnames(df_count) <- gsub(pattern = "_", replacement = "", colnames(df_count))
df_count$Speciescommonname <- gsub(" ", "", df_count$Speciescommonname)
df_count$SpeciesSurvey <- paste(df_count$Speciescommonname, df_count$Survey, sep= "")
df_count_wide_na <- df_count %>% filter(Survey %in% "P915"|Survey %in% "P120") %>% dplyr::select(-Speciescommonname, -Survey) %>% ungroup() %>% pivot_wider(names_from = "SpeciesSurvey", values_from = "avgcount") %>% drop_na()
```

#### Setup data
```{r}
xdata <- df_count_wide_na %>% dplyr::select(avgdepth, avgstemp, avgssal, avgsdo, SAVDistkm, InletDistkm, NoFishRest, FishingAllnum, Sedsizecommon) %>% mutate_at(vars(c(Sedsizecommon, FishingAllnum)), as.factor)
ydata <- df_count_wide_na %>% dplyr::select(alewifeP915:whiteshrimpP120) 
colnames(df_count_wide_na)

smp_size <- floor(0.70 * nrow(df_count_wide_na)) #this is how i want to split training and testing data 

#Reduce # of species included 
species  <- gjamTrimY(ydata, 30, OTHER = FALSE)$y %>% colnames() #minimum # of non-zero observations: 20 
ydata <- ydata[, species] %>% as.data.frame()

r2_general <-function(preds,actual){ 
  return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}

RMSE_func <- function(preds, actual){
  return(sqrt(mean((actual - preds)^2)))
}
```

#### Out-of-sample prediction 
```{r}
#Original gJam model: 
formula_str <- paste("~", paste(colnames(xdata), collapse = " + "))
modo <- gjam(as.formula(formula_str), xdata = xdata, ydata = ydata, modelList = ml)

#Set up for loop 
Bootstrap_times <- 100
smp_size <- floor(0.70 * nrow(df_count_wide_na))
model_compare <- data.frame(matrix(ncol=8, nrow=1))
colnames(model_compare) <- c("r2_con", "r2_uncon", "rmse_con", "rmse_uncon","fish1", "fish2", "fish3", "fish4" )

cor <- modo[["parameters"]][["corMu"]] #residual
resid <- as.data.frame(cor)
resid$names <- rownames(cor)
resid <- resid %>% dplyr::select(reddrumP915, names) %>% dplyr::filter(names != "reddrumP915")

#Start for loop 
for(i in 1:Bootstrap_times) {
  train_ind <- sample(seq_len(nrow(df_count_wide_na)), size = smp_size)
  train <- df_count_wide_na[train_ind, ]
  test <- df_count_wide_na[-train_ind, ]

#randomly select fish to use to predict
use <- resid %>% top_n(20, reddrumP915)
fish <- sample(use$names, 4, replace = F)
specs1 <- fish
ynames <- c(specs1, "reddrumP915")
ydata_train <- train[,colnames(train) %in% ynames]
xdata_train <- train %>% dplyr::select(avgdepth, avgstemp, avgssal, avgsdo, SAVDistkm)
ydata_train <- ydata_train[,colSums(ydata_train != 0) > 5] # I want non-zero rows
ynames <- colnames(ydata_train)

ml <- list(ng = 60000, burnin = 50000, typeNames = 'DA')

mod2 <- gjam(formula= ~ avgdepth + avgstemp + avgssal + avgsdo + SAVDistkm, xdata = xdata_train, ydata = ydata_train, modelList = ml) #this worked when I said formula= 

#conditionally predict out-of-sample: using other species to inform red drum
xddata_test <- test %>% dplyr::select(avgdepth, avgstemp, avgssal, avgsdo, SAVDistkm)
ydata_test <- test[,colnames(test) %in% ynames]
ycond <- ydata_test[,!colnames(ydata_test) %in% "reddrumP915"]
newdata1 <- list(xdata = xdata_test, ydataCond = ycond, nsim = 1000) # conditionally predict in-sample
p6  <- gjamPredict(mod2, newdata = newdata1)
pred_reddrum_con <- p6$sdList$yMu[,colnames(p6$sdList$yMu) %in% "reddrumP915"] #get out dolph
obs_reddrum <- ydata_test[,colnames(ydata_test) %in% "reddrumP915"]#observed dolph
colnames(obs_reddrum) <- "obs_reddrum"

#unconditionally predict out-of-sample
newdata <- list(xdata = xdata_test, nsim = 1000)
p7 <- gjamPredict(mod2, newdata = newdata)
pred_reddrum_un <- p7$sdList$yMu[,colnames(p7$sdList$yMu) %in% "reddrumP915"]
pred_reddrum_un2 <- mod2$prediction$ypredMu[,colnames(mod2$prediction$ypredMu) %in% "reddrumP915"]

dat <- cbind(pred_reddrum_con, obs_reddrum, pred_reddrum_un)
dat <- as.data.frame(dat)

r2_con <- r2_general(dat$pred_reddrum_con, dat$obs_reddrum)
r2_uncon <- r2_general(dat$pred_reddrum_un, dat$obs_reddrum)
rmse_con <-  RMSE_func(actual = dat$obs_reddrum, pred = dat$pred_reddrum_con)
rmse_uncon <-  RMSE_func(actual = dat$obs_reddrum, pred = dat$pred_reddrum_un)

model_compare[i,1] <- r2_con
model_compare[i,2] <- r2_uncon
model_compare[i,3] <- rmse_con
model_compare[i,4] <- rmse_uncon

model_compare[i,5] <- fish[1]
model_compare[i,6] <- fish[2]
model_compare[i,7] <- fish[3]
model_compare[i,8] <- fish[4]
} 

write.csv(model_compare, "~/Desktop/reddrum_out_perform_gjam.csv")

#conditional prediction: 
model_compare %>% arrange(-r2_con)
model_compare %>% arrange(-r2_uncon)

model_compare %>% arrange(rmse_con)
model_compare %>% arrange(rmse_uncon)

library(dplyr)
library(gt)
tbl2 <- model_compare %>% arrange(-r2_uncon) %>% dplyr::select(r2_uncon, fish1, fish2, fish3, fish4) %>% .[1:3,] %>% gt() %>% cols_width(everything() ~ px(175)) %>% cols_align(align= "left")
gtsave(tbl2, "~/Desktop/tbl4.png")

colnames(model_compare)
tbl3 <- model_compare %>% arrange(-r2_uncon) %>% dplyr::select(r2_uncon, fish1, fish2, fish3, fish4) %>% .[1:3,] %>% gt() %>% cols_width(everything() ~ px(175)) %>% cols_align(align= "left")
gtsave(tbl3, "~/Desktop/tbl3.png")
```

```{r}
ml <- list(ng = 60000, burnin = 50000, typeNames = 'DA')

#Highest
ydata_sel <- ydata %>% dplyr::select(reddrumP915, bluecrabP120, stripedmulletP915, brownshrimpP120, spottedseatroutP120, whiteshrimpP120, blackdrumP915, atlanticmenhadenP915, cownoserayP915)
model_choose_out_con <- gjam(~avgdepth + avgstemp + avgssal + avgsdo + SAVDistkm, xdata= xdata, ydata= ydata_sel, modelList= ml)

View(model_choose_out_con$parameters$betaStandXWTable)
save(model_choose_out_con, file='~/Desktop/Ch1Data/gJam/10km/model_choose_out_con.Rdata')

plot <- list(SMALLPLOTS = T, GRIDPLOTS=T, 
                        SAVEPLOTS = T, PLOTALLY = T, 
                        outFolder = '~/Desktop/Ch1Data/gJam/10km/model_choose_out_con_plots2/')
gjamPlot(output = model_choose_out_con, plotPars = plot)

model_choose_out_con$fit$DIC
model_choose_out_con$fit$rmspeAll
model_choose_out_con$fit$rmspeBySpec

md <- ggplot() +
  geom_point(aes(x = model_choose_out_con$inputs$y[,1],
                 y = model_choose_out_con$prediction$ypredMu[,1])) +
  labs(x = "observed", y = "predicted", title = paste0(colnames(model_choose_out_con$inputs$y)[1], ", common"))

ydata_edt2 <- ydata %>% dplyr::select(reddrumP915,whiteshrimpP120, blackdrumP915, atlanticmenhadenP915,cownoserayP915)
model_choose_out_uncon <- gjam(formula= ~avgdepth + avgstemp + avgssal + avgsdo + SAVDistkm, xdata= xdata, ydata= ydata_edt2, modelList= ml)

View(model_choose_out_uncon$parameters$betaStandXWTable)
save(model_choose_out_uncon, file='~/Desktop/Ch1Data/gJam/10km/model_choose_out_uncon.Rdata')

plot <- list(SMALLPLOTS = T, GRIDPLOTS=T, 
                        SAVEPLOTS = T, PLOTALLY = T, 
                        outFolder = '~/Desktop/Ch1Data/gJam/10km/model_choose_out_uncon_plots2/')
gjamPlot(output = model_choose_out_uncon, plotPars = plot)
```

#### Out-of-sample prediction with less environmental variables
```{r}
#Original gJam model: 
formula_str <- paste("~", paste(colnames(xdata), collapse = " + "))
modo <- gjam(as.formula(formula_str), xdata = xdata, ydata = ydata, modelList = ml)

#Set up for loop 
Bootstrap_times <- 100
smp_size <- floor(0.70 * nrow(df_count_wide_na))
model_compare2 <- data.frame(matrix(ncol=8, nrow=1))
colnames(model_compare2) <- c("r2_con2", "r2_uncon2", "rmse_con2", "rmse_uncon2","fish12", "fish22", "fish32", "fish42" )

cor2 <- modo[["parameters"]][["corMu"]] #residual
resid2 <- as.data.frame(cor2)
resid2$names <- rownames(cor2)
resid2 <- resid2 %>% dplyr::select(reddrumP915, names) %>% dplyr::filter(names != "reddrumP915")

#Start for loop 
for(i in 1:Bootstrap_times) {
  train_ind2 <- sample(seq_len(nrow(df_count_wide_na)), size = smp_size)
  train2 <- df_count_wide_na[train_ind2, ]
  test2 <- df_count_wide_na[-train_ind2, ]

#randomly select fish to use to predict
use2 <- resid2 %>% top_n(20, reddrumP915)
fish2 <- sample(use2$names, 4, replace = F)
specs2 <- fish
ynames2 <- c(specs2, "reddrumP915")
ydata_train2 <- train2[,colnames(train2) %in% ynames2]
xdata_train2 <- train2 %>% dplyr::select(avgstemp, avgsdo, SAVDistkm)
ydata_train2 <- ydata_train2[,colSums(ydata_train2 != 0) > 5] # I want non-zero rows
ynames2 <- colnames(ydata_train2)

ml <- list(ng = 60000, burnin = 50000, typeNames = 'DA')

mod22 <- gjam(formula= ~ avgstemp + avgsdo + SAVDistkm, xdata = xdata_train2, ydata = ydata_train2, modelList = ml) #this worked when I said formula= 

#conditionally predict out-of-sample: using other species to inform red drum
xdata_test2 <- test2 %>% dplyr::select(avgstemp, avgsdo, SAVDistkm)
ydata_test2 <- test2[,colnames(test2) %in% ynames2]
ycond2 <- ydata_test2[,!colnames(ydata_test2) %in% "reddrumP915"]
newdata2 <- list(xdata = xdata_test2, ydataCond = ycond2, nsim = 1000) # conditionally predict in-sample
p62  <- gjamPredict(mod22, newdata = newdata2)
pred_reddrum_con2 <- p62$sdList$yMu[,colnames(p62$sdList$yMu) %in% "reddrumP915"] #get out dolph
obs_reddrum2 <- ydata_test2[,colnames(ydata_test2) %in% "reddrumP915"]#observed dolph
colnames(obs_reddrum2) <- "obs_reddrum2"

#unconditionally predict out-of-sample
newdata2 <- list(xdata = xdata_test2, nsim = 1000)
p72 <- gjamPredict(mod22, newdata = newdata2)
pred_reddrum_un2 <- p72$sdList$yMu[,colnames(p72$sdList$yMu) %in% "reddrumP915"]
pred_reddrum_un2 <- mod22$prediction$ypredMu[,colnames(mod22$prediction$ypredMu) %in% "reddrumP915"]

dat2 <- cbind(pred_reddrum_con2, obs_reddrum2, pred_reddrum_un2)
dat2 <- as.data.frame(dat2)

r2_con2 <- r2_general(dat2$pred_reddrum_con2, dat2$obs_reddrum2)
r2_uncon2 <- r2_general(dat2$pred_reddrum_un2, dat2$obs_reddrum2)
rmse_con2 <-  RMSE_func(actual = dat2$obs_reddrum2, pred = dat2$pred_reddrum_con2)
rmse_uncon2 <-  RMSE_func(actual = dat2$obs_reddrum2, pred = dat2$pred_reddrum_un2)

model_compare2[i,1] <- r2_con2
model_compare2[i,2] <- r2_uncon2
model_compare2[i,3] <- rmse_con2
model_compare2[i,4] <- rmse_uncon2

model_compare2[i,5] <- fish12[1]
model_compare2[i,6] <- fish22[2]
model_compare2[i,7] <- fish32[3]
model_compare2[i,8] <- fish42[4]
} 

write.csv(model_compare2, "~/Desktop/reddrum_out_perform_gjam2.csv")

#conditional prediction: 
model_compare %>% arrange(-r2_con)
model_compare %>% arrange(-r2_uncon)

model_compare %>% arrange(rmse_con)
model_compare %>% arrange(rmse_uncon)

library(dplyr)
library(gt)
tbl2 <- model_compare %>% arrange(-r2_uncon) %>% dplyr::select(r2_uncon, fish1, fish2, fish3, fish4) %>% .[1:3,] %>% gt() %>% cols_width(everything() ~ px(175)) %>% cols_align(align= "left")
gtsave(tbl2, "~/Desktop/tbl4.png")

colnames(model_compare)
tbl3 <- model_compare %>% arrange(-r2_uncon) %>% dplyr::select(r2_uncon, fish1, fish2, fish3, fish4) %>% .[1:3,] %>% gt() %>% cols_width(everything() ~ px(175)) %>% cols_align(align= "left")
gtsave(tbl3, "~/Desktop/tbl3.png")
```
