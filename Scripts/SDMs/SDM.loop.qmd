---
title: "SDM.loop"
format: html
editor: visual
---

Test script with red drum. Eventually there will be a .R file to load in all the data and functions.

#### Load packages, functions, and datasets

```{r}
#Load packages and functions 
packages <- c("ggplot2", "tidyverse", "lubridate", "sf", "sp", "dplyr", "rnaturalearth", "readr", "readxl", "spatialEco", "rstatix", "viridis", "BBmisc", "corrplot", "mgcv", "GGally")

invisible(lapply(packages, library, character.only= TRUE))

library(lmtest)
library(countreg)
library(gridExtra)
library(ggplot2)
library(MASS)
library(countreg)
library(performance)

library(tidymodels)
library(tidyflow)
library(devtools)
library(rpart.plot)
library(vip)
library(baguette)
library(ranger)

standard_theme <- theme_bw() + theme(panel.border = element_rect(fill=NA, colour = "black")) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.text.align= 0, legend.title= element_text(size = 12), legend.text = element_text(size= 10), axis.text=element_text(size=10), axis.title=element_text(size=12))

#Load in datasets
##Standardized catch per unit effort 
CPUE_grid_avg_edt <- read.csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE/CPUE_grid_avg_edt.csv")
CPUE_grid_avg_edt <- CPUE_grid_avg_edt[,-1]
CPUE_grid_avg_edt <- CPUE_grid_avg_edt %>% mutate_at(c("Sedsize_common", "ShorelineType", "ITP", "Survey"), as.factor)
CPUE_grid_avg_edt$Speciescommonname <- gsub(" ", "_", CPUE_grid_avg_edt$Speciescommonname)

##Count dataset 
df_count <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE/CPUE_grid_count_avg_edt.csv")  
df_count <- df_count %>% dplyr::select(-c(...1, CPUE, CPUE_stdzd, mean_CPUE, mean_CPUE_stdzd)) #need to remove or R will get confused 
df_count$Speciescommonname <- gsub(" ", "_", df_count$Speciescommonname)

#Pivot-wider datasets: 
##Standardized catch per unit effort dataset wide 
df_CPUE_wide <- CPUE_grid_avg_edt %>% filter(Survey %in% "P915") %>% ungroup() %>% pivot_wider(names_from = "Speciescommonname", values_from = "mean_CPUE_stdzd") %>% drop_na() #this removes three rows where NAs were present, feel comfortable doing this b/c a lot of most species had at least 1 NA (some 2), could be an issue from pulling the data or 

##Binary dataset (0 or 1):  
df_binary_wide <- df_CPUE_wide %>% mutate_at(vars(15:41), ~ ifelse(. > 0, 1, 0))

##Count dataset wide 
df_count_wide <- df_count %>% filter(Survey %in% "P915") %>% ungroup() %>% pivot_wider(names_from = "Speciescommonname", values_from = "avg_count") %>% drop_na()

#Form train/testing datasets by dividing 80% 20% 
set.seed(777)
##Randomly split data in R
sample_size = floor(0.8*nrow(df_CPUE_wide)) #take 80% of rows, # is same b/w dfs

##CPUE model
picked_CPUE = sample(seq_len(nrow(df_CPUE_wide)),size = sample_size)
df_CPUE_wide_test =df_CPUE_wide[-picked_CPUE,]
df_CPUE_wide_train =df_CPUE_wide[picked_CPUE,]

##Binary model
picked_binary = sample(seq_len(nrow(df_binary_wide)),size = sample_size)
df_binary_wide_test = df_binary_wide[-picked_binary,]
df_binary_wide_train = df_binary_wide[picked_binary,]

##Poisson model
picked = sample(seq_len(nrow(df_count_wide)),size = sample_size) 
df_count_wide_test = df_count_wide[-picked,]
df_count_wide_train = df_count_wide[picked,]

#Load in formulas  
##Load GAM formula
gam_formula <- red_drum ~ s(avg_depth, bs="ts", k=5) + s(avg_ssal, bs="ts", k=5) + s(avg_stemp, bs="ts", k=5) + s(avg_sdo, bs="ts", k=5) + s(SAVDist_km, bs="ts", k=5) + s(InletDist_km, bs="ts", k=5) + s(NoFishRest, bs="ts", k=5) + s(atlantic_menhaden, bs="ts", k=5) + s(atlantic_croaker, bs="ts", k=5) + s(southern_flounder, bs="ts", k=5) + s(spot, bs="ts", k=5) + factor(FishingAll_num) + factor(Sedsize_common) #no shoreline type b/c was weird w/ CART

##Other 
model_formula <- red_drum ~ avg_depth + avg_stemp + avg_ssal + avg_sdo + SAVDist_km + InletDist_km + NoFishRest + atlantic_menhaden + atlantic_croaker + southern_flounder + FishingAll_num + Sedsize_common
```

#### Explore data

```{r}
#Exploratory graphs: left skewed and zero-inflated model
df_CPUE_wide %>% ggplot() + geom_histogram(aes(x= red_drum), bins= 10) + xlab("CPUE") + ylab("Counts") + standard_theme
df_binary_wide %>% ggplot() + geom_histogram(aes(x= red_drum), bins= 10) + xlab("Presence/absence") + ylab("Counts") + standard_theme
df_count_wide %>% ggplot() + geom_histogram(aes(x= red_drum), bins= 10) + xlab("Counts") + ylab("Counts") + standard_theme

prop_0 <- 100*sum(df_CPUE_wide$red_drum == 0)/nrow(df_CPUE_wide) #only 50%

length(unique(df_CPUE_wide$gridID))

df_CPUE_wide %>% group_by(gridID) %>% tally() %>% pull(n) %>% table() #instances of gridID

df_count_wide %>% dplyr::select(atlantic_croaker, southern_flounder, spot, red_drum) %>% ggpairs() 
df_count_wide %>% dplyr::select(avg_stemp, avg_sdo, avg_ssal, SAVDist_km, InletDist_km) %>% ggpairs() 
```

##########COUNT##########

Compare models from multiple surveys w/ AIC, and in and out of sample prediction error.

#### P915, 10km

```{r}
#Functions to assess predictive performance 
r2_func <-function(preds,actual){ 
  return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}

RMSE_func <- function(preds, actual){
  return(sqrt(mean((actual - preds)^2)))
}


#Sest up loop 
set.seed(321)
compare_var <- as.data.frame(matrix(ncol = 3, nrow = 0))
colnames(compare_var) <- c("model_type", "R2", "RMSE")

compare_var_in <- as.data.frame(matrix(ncol = 3, nrow = 0))
colnames(compare_var_in) <- c("model_type", "R2", "RMSE")

Bootstrap_times <- 100 #this is how many times i want the loop to run
smp_size <- floor(0.70 * nrow(df_count_wide)) #this is how i want to split training and testing data 
```

```{r}
for(i in 1:Bootstrap_times) {
  train_ind <- sample(seq_len(nrow(df_count_wide)), size = smp_size)
  train <- df_count_wide[train_ind, ]
  test <- df_count_wide[-train_ind, ]

  #GLMs and GAMs
  pois_mod <- glm(model_formula, family="poisson", data=train)
  zinb_mod <- zeroinfl(model_formula, dist = 'poisson', data = train)
  nb_gam <- gam(gam_formula, family= "nb", data= train)
  pois_gam <- gam(gam_formula, family=poisson(), data= test)
 tweedie_gam <- gam(gam_formula, family= tw(link= "log"), method= "REML", data=train)
  delta_gam <- gam(list(gam_formula, ~ s(avg_depth, bs="ts", k=5) + s(avg_ssal, bs="ts", k=5) + s(avg_stemp, bs="ts", k=5) + s(avg_sdo, bs="ts", k=5) + s(SAVDist_km, bs="ts", k=5) + s(InletDist_km, bs="ts", k=5) + s(NoFishRest, bs="ts", k=5) + s(atlantic_menhaden, bs="ts", k=5) + s(atlantic_croaker, bs="ts", k=5) + s(southern_flounder, bs="ts", k=5) + s(spot, bs="ts", k=5) + factor(FishingAll_num) + factor(Sedsize_common)), family= ziplss(), data= train, method = "REML")
  
  #Machine learning 
  ##Random forest
  rf_mod <-
  rand_forest(mode = "regression") %>%
  set_engine("ranger", importance = "impurity")
  tflow <- df_count_wide %>%
  tidyflow(seed = 23151) %>%
  plug_formula(model_formula) %>%
  plug_split(initial_split, prop= 0.70) %>%  plug_model(rf_mod)
  res_rf <- tflow %>% fit()

  ##Bagging
  btree <- bag_tree(mode = "regression") %>% set_engine("rpart", times = 50)
  tflow2 <- df_count_wide %>%
    tidyflow(seed = 566521) %>%
    plug_split(initial_split, prop= 0.70) %>% plug_formula(model_formula) %>%
  plug_model(btree)
  res_bag <- tflow2 %>% fit()
  
  ##Boosting
  boost_mod <-
  boost_tree(mode = "regression", trees = 500) %>%
  set_engine("xgboost")

  tflow <- df_count_wide %>%
    tidyflow(seed = 51231) %>%
    plug_formula(model_formula) %>%
    plug_split(initial_split, prop= 0.70) %>%
    plug_model(boost_mod)
    res_boost <- fit(tflow)

##Out of sample prediction 
 #GLMs and GAMs
  pois_pred <- predict(pois_mod, newdata = test, type = "response")
  zinb_pred <- predict(zinb_mod, newdata = test, type = "response")
  nb_gam_pred <- predict(nb_gam, newdata= test, type= "response")
  pois_gam_pred <- predict(pois_gam, newdata= test, type= "response")
  tweedie_gam_pred <- predict(tweedie_gam, newdata= test, type = "response")
  inv_link <- binomial(link = "cloglog")$linkinv
  delta_gam_pred <- predict(delta_gam, test, type = "link") %>% as.data.frame() %>% transmute(family = "Zero-inflated Poisson", pred = inv_link(V2) * exp(V1)) %>% dplyr::select(pred)

  #Random forest 
  res_rf_pred <- res_rf %>% predict_testing()
  res_bag_pred <- res_bag %>% predict_testing()
  res_boost_pred <- res_boost %>% predict_testing()

  #Data frame for modeling types: out of sample  
  ##GLM, GAMs
    pois <- as.data.frame(matrix(ncol =3))
    pois$V1 <- "pois"
    pois$V2 <- r2_func(pois_pred, test$red_drum)
    pois$V3 <- RMSE_func(pois_pred, test$red_drum)
    zinb <- as.data.frame(matrix(ncol =3))
    zinb$V1 <- "zinb"
    zinb$V2 <- r2_func(zinb_pred, test$red_drum)
    zinb$V3 <- RMSE_func(zinb_pred, test$red_drum)
    nb_gam_df <- as.data.frame(matrix(ncol =3))
    nb_gam_df$V1 <- "nb gam"
    nb_gam_df$V2 <- r2_func(nb_gam_pred, test$red_drum)
    nb_gam_df$V3 <- RMSE_func(nb_gam_pred, test$red_drum)
    pois_gam_df <- as.data.frame(matrix(ncol = 3))
    pois_gam_df$V1 <- "pois gam"
    pois_gam_df$V2 <- r2_func(pois_gam_pred, test$red_drum)
    pois_gam_df$V3 <- RMSE_func(pois_gam_pred, test$red_drum)
    tweedie_gam_df <- as.data.frame(matrix(ncol= 3))
    tweedie_gam_df$V1 <- "tweedie gam"
    tweedie_gam_df$V2 <- r2_func(tweedie_gam_pred, test$red_drum)
    tweedie_gam_df$V3 <- RMSE_func(tweedie_gam_pred, test$red_drum)
    delta_gam_df <- as.data.frame(matrix(ncol = 3))
    delta_gam_df$V1 <- "delta gam"
    delta_gam_df$V2 <- r2_func(delta_gam_pred$pred, test$red_drum)
    delta_gam_df$V3 <- RMSE_func(delta_gam_pred$pred, test$red_drum)

    ##Machine learning
    res_rf_pred_df <- as.data.frame(matrix(ncol= 3))
    res_rf_pred_df$V1 <- "rf"
    res_rf_pred_df$V2 <- r2_func(res_rf_pred$.pred, test$red_drum)
    res_rf_pred_df$V3 <- RMSE_func(res_rf_pred$.pred, test$red_drum)
    res_bag_pred_df <- as.data.frame(matrix(ncol= 3))
    res_bag_pred_df$V1 <- "bagged"
    res_bag_pred_df$V2 <- r2_func(res_bag_pred$.pred, test$red_drum)
    res_bag_pred_df$V3 <- RMSE_func(res_bag_pred$.pred, test$red_drum)
    res_boost_pred_df <- as.data.frame(matrix(ncol= 3))
    res_boost_pred_df$V1 <- "boosted"
    res_boost_pred_df$V2 <- r2_func(res_bag_pred$.pred, test$red_drum)
    res_boost_pred_df$V3 <- RMSE_func(res_bag_pred$.pred, test$red_drum)
    
  dat <- rbind(pois, zinb, nb_gam_df, pois_gam_df, tweedie_gam_df, delta_gam_df, res_rf_pred_df, res_bag_pred_df, res_boost_pred_df)
colnames(dat) <- c("model_type", "R2", "RMSE")
  compare_var <- rbind(compare_var, dat)
    
##In-sample:
  #GLMs and GAMs
  pois_pred_in <- predict(pois_mod, newdata = train, type = "response")
  zinb_pred_in <- predict(zinb_mod, newdata = train, type = "response")
  nb_gam_pred_in <- predict(nb_gam, newdata= train, type= "response")
  pois_gam_pred_in <- predict(pois_gam, newdata= train, type= "response")
  tweedie_gam_pred_in <- predict(tweedie_gam, newdata= train, type = "response")
  inv_link <- binomial(link = "cloglog")$linkinv
  delta_gam_pred_in <- predict(delta_gam, train, type = "link") %>% as.data.frame() %>% transmute(family = "Zero-inflated Poisson", pred = inv_link(V2) * exp(V1)) %>% dplyr::select(pred)

  #Random forest 
  res_rf_pred_in <- res_rf %>% predict_training()
  res_bag_pred_in <- res_bag %>% predict_training()
  res_boost_pred_in <- res_boost %>% predict_training()

    #Data frame for modeling types: in sample  
    ##GLM, GAMs
    pois_in <- as.data.frame(matrix(ncol= 3))
    pois_in$V1 <- "pois in"
    pois_in$V2 <- r2_func(pois_pred_in, train$red_drum)
    pois_in$V3 <- RMSE_func(pois_pred_in, train$red_drum)
    zinb_in <- as.data.frame(matrix(ncol= 3))
    zinb_in$V1 <- "zinb in"
    zinb_in$V2 <- r2_func(zinb_pred_in, train$red_drum)
    zinb_in$V3 <- RMSE_func(zinb_pred_in, train$red_drum)
    nb_gam_df_in <- as.data.frame(matrix(ncol= 3))
    nb_gam_df_in$V1 <- "nb gam in"
    nb_gam_df_in$V2 <- r2_func(nb_gam_pred_in, train$red_drum)
    nb_gam_df_in$V3 <- RMSE_func(nb_gam_pred_in, train$red_drum)
    pois_gam_df_in <- as.data.frame(matrix(ncol= 3))
    pois_gam_df_in$V1 <- "pois gam in"
    pois_gam_df_in$V2 <- r2_func(pois_gam_pred_in, train$red_drum)
    pois_gam_df_in$V3 <- RMSE_func(pois_gam_pred_in, train$red_drum)
    tweedie_gam_df_in <- as.data.frame(matrix(ncol= 3))
    tweedie_gam_df_in$V1 <- "tweedie gam in"
    tweedie_gam_df_in$V2 <- r2_func(tweedie_gam_pred_in, train$red_drum)
    tweedie_gam_df_in$V3 <- RMSE_func(tweedie_gam_pred_in, train$red_drum)
    delta_gam_df_in <- as.data.frame(matrix(ncol= 3))
    delta_gam_df_in$V1 <- "delta gam in"
     delta_gam_df_in$V2 <- r2_func(delta_gam_pred_in$pred, train$red_drum)
    delta_gam_df_in$V3 <- RMSE_func(delta_gam_pred_in$pred, train$red_drum)
    res_boost_pred_df_in <- as.data.frame(matrix(ncol= 3))
    res_boost_pred_df_in$V1 <- "boost tree in"
    res_boost_pred_df_in$V2 <- r2_func(res_bag_pred_in$.pred, train$red_drum)
    res_boost_pred_df_in$V3 <- RMSE_func(res_bag_pred_in$.pred, train$red_drum)
   res_rf_pred_df_in <- as.data.frame(matrix(ncol= 3))
   res_rf_pred_df_in$V1 <- "rf in"
     res_rf_pred_df_in$V2 <- r2_func(res_rf_pred_in$.pred, train$red_drum)
    res_rf_pred_df_in$V3 <- RMSE_func(res_rf_pred_in$.pred, train$red_drum)
    res_bag_pred_df_in <- as.data.frame(matrix(ncol= 3))
    res_bag_pred_df_in$V1 <- "bag in"
    res_bag_pred_df_in$V2 <- r2_func(res_bag_pred_in$.pred, train$red_drum)
    res_bag_pred_df_in$V3 <- RMSE_func(res_bag_pred_in$.pred, train$red_drum)
    
  dat_in <- rbind(pois_in, zinb_in, nb_gam_df_in, pois_gam_df_in, tweedie_gam_df_in, delta_gam_df_in, res_rf_pred_df_in, res_bag_pred_df_in, res_boost_pred_df_in)
colnames(dat_in) <- c("model_type", "R2", "RMSE")
  compare_var_in <- rbind(compare_var_in, dat_in)
}

compare_out <- compare_var %>% pivot_longer(R2:RMSE, names_to = "metric", values_to = "values") %>% group_by(model_type, metric) %>% summarise(mean_val = mean(values)) %>% pivot_wider(names_from = "metric", values_from = "mean_val") %>% arrange(-R2)
compare_in <- compare_var_in %>% pivot_longer(R2:RMSE, names_to = "metric", values_to = "values") %>% group_by(model_type, metric) %>% summarise(mean_val = mean(values)) %>% pivot_wider(names_from = "metric", values_from = "mean_val") %>% arrange(-R2)
```

```{r}
#Calculate AIC and deviance explained separately for models
pois_mod <- glm(model_formula, family="poisson", data=df_count_wide)
  # nb_mod <- glm.nb(model_formula, data = train)
  # # zipois_mod <- zeroinfl(model_formula, dist = 'negbin', data = train)
  zinb_mod <- zeroinfl(model_formula, dist = 'poisson', data = df_count_wide)
  nb_gam <- gam(gam_formula, family= "nb", data= df_count_wide)
  pois_gam <- gam(gam_formula, family=poisson(), data= df_count_wide)
 tweedie_gam <- gam(gam_formula, family= tw(link= "log"), method= "REML", data=df_count_wide)
    delta_gam <- gam(list(gam_formula, ~ s(avg_depth, bs="ts", k=5) + s(avg_ssal, bs="ts", k=5) + s(avg_stemp, bs="ts", k=5) + s(avg_sdo, bs="ts", k=5) + s(SAVDist_km, bs="ts", k=5) + s(InletDist_km, bs="ts", k=5) + s(NoFishRest, bs="ts", k=5) + s(atlantic_menhaden, bs="ts", k=5) + s(atlantic_croaker, bs="ts", k=5) + s(southern_flounder, bs="ts", k=5) + s(spot, bs="ts", k=5) + factor(FishingAll_num) + factor(Sedsize_common)), family= ziplss(), data= df_count_wide, method = "REML")
  
AIC <- AIC(pois_mod, zinb_mod, nb_gam, pois_gam, tweedie_gam)
```

```{r}
#Summary output from models
summary(tweedie_gam)
gam.check(tweedie_gam)

summary(pois_mod)
autoplot.countreg(pois_mod)

summary(pois_gam)
gam.check(pois_gam)
```

```{r}
#Commented out 
  # nb_mod <- glm.nb(model_formula, data = train)
  # # zipois_mod <- zeroinfl(model_formula, dist = 'negbin', data = train)
  # nb_pred <- predict(nb_mod, newdata = test, type = "response") #glm.fit: algorithm did not convergeWarning: glm.fit: algorithm did not converge
  # zipois_pred <- predict(zipois_mod, newdata = test, type = "response") #chedWarning: system is computationally singular: reciprocal condition number = 1.30301e-21FALSEWarning: glm.fit: algorithm did not convergeWarning: glm.fit: algorithm did not conve

 # pois$V4 <- AIC(pois_mod)
  # pois$V5 <- 1-pchisq(pois_mod$deviance,  pois_mod$df.residual)

  # nb <- as.data.frame(matrix(ncol =3))
  # nb$V1 <- "nb"
  # nb$V2 <- r2_func(nb_pred, test$red_drum)
  # nb$V3 <- RMSE_func(nb_pred, test$red_drum)
  # 
  # zipois <- as.data.frame(matrix(ncol =3))
  # zipois$V1 <- "zipois"
  # zipois$V2 <- r2_func(zipois_pred, test$red_drum)
  # zipois$V3 <- RMSE_func(zipois_pred, test$red_drum)
```

#### P915, P120, 10km
```{r}
#Organize data 
df_count <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE/CPUE_grid_count_avg_edt.csv")  
df_count <- df_count %>% dplyr::select(-c(...1, CPUE, CPUE_stdzd, mean_CPUE, mean_CPUE_stdzd)) #need to remove or R will get confused 
df_count$Speciescommonname <- gsub(" ", "_", df_count$Speciescommonname)
df_count$SpeciesSurvey <- paste(df_count$Speciescommonname, df_count$Survey, sep= "_")

df_count_wide2 <- df_count %>% dplyr::select(-Speciescommonname, -Survey) %>% ungroup() %>% pivot_wider(names_from = "SpeciesSurvey", values_from = "avg_count") #%>% drop_na()

df_count_wide_na <- df_count %>% filter(Survey %in% "P915"|Survey %in% "P120") %>% dplyr::select(-Speciescommonname, -Survey) %>% ungroup() %>% pivot_wider(names_from = "SpeciesSurvey", values_from = "avg_count") %>% drop_na()
#87 gridIDs with data from all species 
#143 for P915 and P195
#281 b/w P120 and P195
```

```{r}
#Functions to assess predictive performance 
r2_func <-function(preds,actual){ 
  return(1- sum((preds - actual) ^ 2)/sum((actual - mean(actual))^2))
}

RMSE_func <- function(preds, actual){
  return(sqrt(mean((actual - preds)^2)))
}

#Set up loop 
set.seed(321)
compare_var_na <- as.data.frame(matrix(ncol = 3, nrow = 0))
colnames(compare_var_na) <- c("model_type", "R2", "RMSE")

compare_var_in_na <- as.data.frame(matrix(ncol = 3, nrow = 0))
colnames(compare_var_in_na) <- c("model_type", "R2", "RMSE")

Bootstrap_times <- 100 #this is how many times i want the loop to run
smp_size_na <- floor(0.70 * nrow(df_count_wide_na)) #this is how i want to split training and testing data 

gam_formula_na <- red_drum_P915 ~ s(avg_depth, bs="ts", k=5) + s(avg_ssal, bs="ts", k=5) + s(avg_stemp, bs="ts", k=5) + s(avg_sdo, bs="ts", k=5) + s(SAVDist_km, bs="ts", k=5) + s(InletDist_km, bs="ts", k=5) + s(NoFishRest, bs="ts", k=5) + s(atlantic_menhaden_P915, bs="ts", k=5) + s(atlantic_croaker_P915, bs="ts", k=5) + s(southern_flounder_P915, bs="ts", k=5) + s(spot_P915, bs="ts", k=5) + factor(FishingAll_num) + factor(Sedsize_common) + s(blue_crab_P120, bs="ts", k=5) + s(weakfish_P120, bs="ts", k=5) + s(brown_shrimp_P120, bs="ts", k=5) + s(atlantic_menhaden_P120, bs="ts", k=5) + s(atlantic_croaker_P120, bs="ts", k=5) + s(pinfish_P120, bs="ts", k=5) + s(pink_shrimp_P120, bs="ts", k=5) + s(southern_flounder_P120, bs="ts", k=5) + s(spot_P120, bs="ts", k=5)

model_formula_na <- red_drum_P915 ~ avg_depth + avg_stemp + avg_ssal + avg_sdo + SAVDist_km + InletDist_km + NoFishRest + atlantic_menhaden_P915 + atlantic_croaker_P915 + southern_flounder_P915 + FishingAll_num + Sedsize_common + blue_crab_P120 + weakfish_P120 + atlantic_menhaden_P120 + atlantic_croaker_P120 + pinfish_P120 + pink_shrimp_P120 + southern_flounder_P120 + spot_P120
```

```{r}
for(i in 1:Bootstrap_times) {
  train_ind <- sample(seq_len(nrow(df_count_wide_na)), size = smp_size_na)
  train <- df_count_wide_na[train_ind, ]
  test <- df_count_wide_na[-train_ind, ]

  #GLMs and GAMs
 # pois_mod <- glm(model_formula, family="poisson", data=train)
  # zinb_mod <- zeroinfl(model_formula, dist = 'poisson', data = train) #Warning: glm.fit: fitted rates numerically 0 occurredWarning: glm.fit: fitted probabilities numerically 0 or 1 occurredWarning: system is computationally singular: reciprocal condition number = 2.64664e-26FALSE
  nb_gam <- gam(gam_formula_na, family= "nb", data= train)
#  pois_gam <- gam(gam_formula, family=poisson(), data= test) #Error in smooth.construct.tp.smooth.spec(object, data, knots) : A term has fewer unique covariate combinations than specified maximum degrees of freedom
# }

 tweedie_gam <- gam(gam_formula_na, family= tw(link= "log"), method= "REML", data=train)
  delta_gam <- gam(list(gam_formula_na, ~ s(avg_depth, bs="ts", k=5) + s(avg_ssal, bs="ts", k=5) + s(avg_stemp, bs="ts", k=5) + s(avg_sdo, bs="ts", k=5) + s(SAVDist_km, bs="ts", k=5) + s(InletDist_km, bs="ts", k=5) + s(NoFishRest, bs="ts", k=5) + s(atlantic_menhaden_P915, bs="ts", k=5) + s(atlantic_croaker_P915, bs="ts", k=5) + s(southern_flounder_P915, bs="ts", k=5) + s(spot_P915, bs="ts", k=5) + factor(FishingAll_num) + factor(Sedsize_common) + s(blue_crab_P120, bs="ts", k=5) + s(weakfish_P120, bs="ts", k=5) + s(brown_shrimp_P120, bs="ts", k=5) + s(atlantic_menhaden_P120, bs="ts", k=5) + s(atlantic_croaker_P120, bs="ts", k=5) + s(pinfish_P120, bs="ts", k=5) + s(pink_shrimp_P120, bs="ts", k=5) + s(southern_flounder_P120, bs="ts", k=5) + s(spot_P120, bs="ts", k=5) + factor(Sedsize_common)), family= ziplss(), data= train, method = "REML")
  
  #Machine learning 
  ##Random forest
  rf_mod <-
  rand_forest(mode = "regression") %>%
  set_engine("ranger", importance = "impurity")
  tflow <- df_count_wide_na %>%
  tidyflow(seed = 23151) %>%
  plug_formula(model_formula_na) %>%
  plug_split(initial_split, prop= 0.70) %>%  plug_model(rf_mod)
  res_rf <- tflow %>% fit()

  ##Bagging
  btree <- bag_tree(mode = "regression") %>% set_engine("rpart", times = 50)
  tflow2 <- df_count_wide_na %>%
    tidyflow(seed = 566521) %>%
    plug_split(initial_split, prop= 0.70) %>% plug_formula(model_formula_na) %>%
  plug_model(btree)
  res_bag <- tflow2 %>% fit()
  
  ##Boosting
  boost_mod <-
  boost_tree(mode = "regression", trees = 500) %>%
  set_engine("xgboost")

  tflow <- df_count_wide_na %>%
    tidyflow(seed = 51231) %>%
    plug_formula(model_formula_na) %>%
    plug_split(initial_split, prop= 0.70) %>%
    plug_model(boost_mod)
    res_boost <- fit(tflow)

##Out of sample prediction 
 #GLMs and GAMs
  # pois_pred <- predict(pois_mod, newdata = test, type = "response")
  # zinb_pred <- predict(zinb_mod, newdata = test, type = "response")
  nb_gam_pred <- predict(nb_gam, newdata= test, type= "response")
  #pois_gam_pred <- predict(pois_gam, newdata= test, type= "response")
  tweedie_gam_pred <- predict(tweedie_gam, newdata= test, type = "response")
  inv_link <- binomial(link = "cloglog")$linkinv
  delta_gam_pred <- predict(delta_gam, test, type = "link") %>% as.data.frame() %>% transmute(family = "Zero-inflated Poisson", pred = inv_link(V2) * exp(V1)) %>% dplyr::select(pred)

  #Random forest 
  res_rf_pred <- res_rf %>% predict_testing()
  res_bag_pred <- res_bag %>% predict_testing()
  res_boost_pred <- res_boost %>% predict_testing()

  #Data frame for modeling types: out of sample  
  ##GLM, GAMs
    pois <- as.data.frame(matrix(ncol =3))
    pois$V1 <- "pois"
    pois$V2 <- r2_func(pois_pred, test$red_drum_P915)
    pois$V3 <- RMSE_func(pois_pred, test$red_drum_P915)
    zinb <- as.data.frame(matrix(ncol =3))
    zinb$V1 <- "zinb"
    zinb$V2 <- r2_func(zinb_pred, test$red_drum_P915)
    zinb$V3 <- RMSE_func(zinb_pred, test$red_drum_P915)
    nb_gam_df <- as.data.frame(matrix(ncol =3))
    nb_gam_df$V1 <- "nb gam"
    nb_gam_df$V2 <- r2_func(nb_gam_pred, test$red_drum_P915)
    nb_gam_df$V3 <- RMSE_func(nb_gam_pred, test$red_drum_P915)
    pois_gam_df <- as.data.frame(matrix(ncol = 3))
    pois_gam_df$V1 <- "pois gam"
    pois_gam_df$V2 <- r2_func(pois_gam_pred, test$red_drum_P915)
    pois_gam_df$V3 <- RMSE_func(pois_gam_pred, test$red_drum_P915)
    tweedie_gam_df <- as.data.frame(matrix(ncol= 3))
    tweedie_gam_df$V1 <- "tweedie gam"
    tweedie_gam_df$V2 <- r2_func(tweedie_gam_pred, test$red_drum_P915)
    tweedie_gam_df$V3 <- RMSE_func(tweedie_gam_pred, test$red_drum_P915)
    delta_gam_df <- as.data.frame(matrix(ncol = 3))
    delta_gam_df$V1 <- "delta gam"
    delta_gam_df$V2 <- r2_func(delta_gam_pred$pred, test$red_drum_P915)
    delta_gam_df$V3 <- RMSE_func(delta_gam_pred$pred, test$red_drum_P915)

    ##Machine learning
    res_rf_pred_df <- as.data.frame(matrix(ncol= 3))
    res_rf_pred_df$V1 <- "rf"
    res_rf_pred_df$V2 <- r2_func(res_rf_pred$.pred, test$red_drum_P915)
    res_rf_pred_df$V3 <- RMSE_func(res_rf_pred$.pred, test$red_drum_P915)
    res_bag_pred_df <- as.data.frame(matrix(ncol= 3))
    res_bag_pred_df$V1 <- "bagged"
    res_bag_pred_df$V2 <- r2_func(res_bag_pred$.pred, test$red_drum_P915)
    res_bag_pred_df$V3 <- RMSE_func(res_bag_pred$.pred, test$red_drum_P915)
    res_boost_pred_df <- as.data.frame(matrix(ncol= 3))
    res_boost_pred_df$V1 <- "boosted"
    res_boost_pred_df$V2 <- r2_func(res_bag_pred$.pred, test$red_drum_P915)
    res_boost_pred_df$V3 <- RMSE_func(res_bag_pred$.pred, test$red_drum_P915)
    
  dat_na <- rbind(nb_gam_df, tweedie_gam_df, delta_gam_df, res_rf_pred_df, res_bag_pred_df, res_boost_pred_df)
colnames(dat_na) <- c("model_type", "R2", "RMSE")
  compare_var_na <- rbind(compare_var_na, dat_na)
    
##In-sample:
  #GLMs and GAMs
  # pois_pred_in <- predict(pois_mod, newdata = train, type = "response")
  # zinb_pred_in <- predict(zinb_mod, newdata = train, type = "response")
  nb_gam_pred_in <- predict(nb_gam, newdata= train, type= "response")
  # pois_gam_pred_in <- predict(pois_gam, newdata= train, type= "response")
  tweedie_gam_pred_in <- predict(tweedie_gam, newdata= train, type = "response")
  inv_link <- binomial(link = "cloglog")$linkinv
  delta_gam_pred_in <- predict(delta_gam, train, type = "link") %>% as.data.frame() %>% transmute(family = "Zero-inflated Poisson", pred = inv_link(V2) * exp(V1)) %>% dplyr::select(pred)

  #Random forest 
  res_rf_pred_in <- res_rf %>% predict_training()
  res_bag_pred_in <- res_bag %>% predict_training()
  res_boost_pred_in <- res_boost %>% predict_training()

    #Data frame for modeling types: in sample  
    ##GLM, GAMs
    # pois_in <- as.data.frame(matrix(ncol= 3))
    # pois_in$V1 <- "pois in"
    # pois_in$V2 <- r2_func(pois_pred_in, train$red_drum_P915)
    # pois_in$V3 <- RMSE_func(pois_pred_in, train$red_drum_P915)
    # zinb_in <- as.data.frame(matrix(ncol= 3))
    # zinb_in$V1 <- "zinb in"
    # zinb_in$V2 <- r2_func(zinb_pred_in, train$red_drum_P915)
    # zinb_in$V3 <- RMSE_func(zinb_pred_in, train$red_drum_P915)
    nb_gam_df_in <- as.data.frame(matrix(ncol= 3))
    nb_gam_df_in$V1 <- "nb gam in"
    nb_gam_df_in$V2 <- r2_func(nb_gam_pred_in, train$red_drum_P915)
    nb_gam_df_in$V3 <- RMSE_func(nb_gam_pred_in, train$red_drum_P915)
    # pois_gam_df_in <- as.data.frame(matrix(ncol= 3))
    # pois_gam_df_in$V1 <- "pois gam in"
    # pois_gam_df_in$V2 <- r2_func(pois_gam_pred_in, train$red_drum_P915)
    # pois_gam_df_in$V3 <- RMSE_func(pois_gam_pred_in, train$red_drum_P915)
    tweedie_gam_df_in <- as.data.frame(matrix(ncol= 3))
    tweedie_gam_df_in$V1 <- "tweedie gam in"
    tweedie_gam_df_in$V2 <- r2_func(tweedie_gam_pred_in, train$red_drum_P915)
    tweedie_gam_df_in$V3 <- RMSE_func(tweedie_gam_pred_in, train$red_drum_P915)
    delta_gam_df_in <- as.data.frame(matrix(ncol= 3))
    delta_gam_df_in$V1 <- "delta gam in"
     delta_gam_df_in$V2 <- r2_func(delta_gam_pred_in$pred, train$red_drum_P915)
    delta_gam_df_in$V3 <- RMSE_func(delta_gam_pred_in$pred, train$red_drum_P915)
    res_boost_pred_df_in <- as.data.frame(matrix(ncol= 3))
    res_boost_pred_df_in$V1 <- "boost tree in"
    res_boost_pred_df_in$V2 <- r2_func(res_bag_pred_in$.pred, train$red_drum_P915)
    res_boost_pred_df_in$V3 <- RMSE_func(res_bag_pred_in$.pred, train$red_drum_P915)
   res_rf_pred_df_in <- as.data.frame(matrix(ncol= 3))
   res_rf_pred_df_in$V1 <- "rf in"
     res_rf_pred_df_in$V2 <- r2_func(res_rf_pred_in$.pred, train$red_drum_P915)
    res_rf_pred_df_in$V3 <- RMSE_func(res_rf_pred_in$.pred, train$red_drum_P915)
    res_bag_pred_df_in <- as.data.frame(matrix(ncol= 3))
    res_bag_pred_df_in$V1 <- "bag in"
    res_bag_pred_df_in$V2 <- r2_func(res_bag_pred_in$.pred, train$red_drum_P915)
    res_bag_pred_df_in$V3 <- RMSE_func(res_bag_pred_in$.pred, train$red_drum_P915)
    
  dat_in_na <- rbind(nb_gam_df_in, tweedie_gam_df_in, delta_gam_df_in, res_rf_pred_df_in, res_bag_pred_df_in, res_boost_pred_df_in)
colnames(dat_in_na) <- c("model_type", "R2", "RMSE")
  compare_var_in_na <- rbind(compare_var_in_na, dat_in_na)
}

compare_out_na <- compare_var_na %>% pivot_longer(R2:RMSE, names_to = "metric", values_to = "values") %>% group_by(model_type, metric) %>% summarise(mean_val = mean(values)) %>% pivot_wider(names_from = "metric", values_from = "mean_val") %>% arrange(-R2)
compare_in_na <- compare_var_in_na %>% pivot_longer(R2:RMSE, names_to = "metric", values_to = "values") %>% group_by(model_type, metric) %>% summarise(mean_val = mean(values)) %>% pivot_wider(names_from = "metric", values_from = "mean_val") %>% arrange(-R2)
```

```{r}
 #models 
pois_mod_na <- glm(model_formula_na, family="poisson", data=df_count_wide_na)
  # nb_mod <- glm.nb(model_formula, data = train)
  # # zipois_mod <- zeroinfl(model_formula, dist = 'negbin', data = train)
  zinb_mod_na <- zeroinfl(model_formula_na, dist = 'poisson', data = df_count_wide_na)
  nb_gam_na <- gam(gam_formula_na, family= "nb", data= df_count_wide_na)
  pois_gam_na <- gam(gam_formula_na, family=poisson(), data= df_count_wide_na)
 tweedie_gam_na <- gam(gam_formula_na, family= tw(link= "log"), method= "REML", data=df_count_wide_na)
  delta_gam_na <- gam(list(gam_formula_na, ~ s(avg_depth, bs="ts", k=5) + s(avg_ssal, bs="ts", k=5) + s(avg_stemp, bs="ts", k=5) + s(avg_sdo, bs="ts", k=5) + s(SAVDist_km, bs="ts", k=5) + s(InletDist_km, bs="ts", k=5) + s(NoFishRest, bs="ts", k=5) + s(atlantic_menhaden_P915, bs="ts", k=5) + s(atlantic_croaker_P915, bs="ts", k=5) + s(southern_flounder_P915, bs="ts", k=5) + s(spot_P915, bs="ts", k=5) + factor(FishingAll_num) + factor(Sedsize_common) + s(blue_crab_P120, bs="ts", k=5) + s(weakfish_P120, bs="ts", k=5) + s(brown_shrimp_P120, bs="ts", k=5) + s(atlantic_menhaden_P120, bs="ts", k=5) + s(atlantic_croaker_P120, bs="ts", k=5) + s(pinfish_P120, bs="ts", k=5) + s(pink_shrimp_P120, bs="ts", k=5) + s(southern_flounder_P120, bs="ts", k=5) + s(spot_P120, bs="ts", k=5) + factor(Sedsize_common)), family= ziplss(), data= df_count_wide_na, method = "REML")
    
  AIC_na <- AIC(pois_mod_na, zinb_mod_na, nb_gam_na, pois_gam_na, tweedie_gam_na)
#unsure how to get AIC for hurdle model 
```

```{r}
#Look at output from various models 
summary(zinb_mod_na)
gam.check(tweedie_gam_na)
```

### P915, P120, 10 km, Binary
```{r}








df_binary_wide <- df_CPUE_wide %>% mutate_at(vars(15:41), ~ ifelse(. > 0, 1, 0))

colnames(df_CPUE_wide)

df_count <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE/CPUE_grid_count_avg_edt.csv")  
df_count <- df_count %>% dplyr::select(-c(...1, CPUE, CPUE_stdzd, mean_CPUE, mean_CPUE_stdzd)) #need to remove or R will get confused 
df_count$Speciescommonname <- gsub(" ", "_", df_count$Speciescommonname)
df_count$SpeciesSurvey <- paste(df_count$Speciescommonname, df_count$Survey, sep= "_")

df_count_wide2 <- df_count %>% dplyr::select(-Speciescommonname, -Survey) %>% ungroup() %>% pivot_wider(names_from = "SpeciesSurvey", values_from = "avg_count") #%>% drop_na()

df_count_wide_na <- df_count %>% filter(Survey %in% "P915"|Survey %in% "P120") %>% dplyr::select(-Speciescommonname, -Survey) %>% ungroup() %>% pivot_wider(names_from = "SpeciesSurvey", values_from = "avg_count") %>% drop_na()
#87 gridIDs with data from all species 
#143 for P915 and P195
#281 b/w P120 and P195
```

