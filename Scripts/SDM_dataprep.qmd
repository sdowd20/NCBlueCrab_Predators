---
title: "GAM_sd"
format: html
editor: visual
---

#### Load packages, CPUE datasets, and filter them

```{r}
#Load packages and functions 
packages <- c("ggplot2", "tidyverse", "lubridate", "sf", "sp", "dplyr", "rnaturalearth", "readr", "readxl", "spatialEco", "rstatix", "viridis", "BBmisc")
invisible(lapply(packages, library, character.only= TRUE))

world <- ne_countries(scale = "medium", returnclass = "sf")
globe_bb <- matrix(c(-78.900147,33.802938,
                      -78.900147,36.672128,
                      -75.263672,36.672128,
                     -75.263672, 33.802938,
                     -78.900147,33.802938), byrow = TRUE, ncol = 2) %>% list() %>% st_polygon() %>% st_sfc(., crs = 4326)

globe_grid_30 <- st_make_grid(x= globe_bb, n = c(30,30), crs = 4326, what = 'polygons') %>% st_sf('geometry' = ., data.frame('ID' = 1:length(.))) #grid is 0.13째 by 0.13째 (14.4 km)

standard_theme <- theme_bw() + theme(panel.border = element_rect(fill=NA, colour = "black")) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.text.align= 0, legend.title= element_text(size = 12), legend.text = element_text(size= 10), axis.text=element_text(size=10), axis.title=element_text(size=12))

#Load CPUE datasets
setwd("~/Documents/GitHub/NCBlueCrab_Predators")
p915_CPUE <- read_csv("Data/P915/Finalized/p915_CPUE.csv")
p120_CPUE <- read_csv("Data/P120/Finalized/p120_CPUE.csv")
p195_CPUE <- read_csv("Data/P195/Finalized/p195_CPUE.csv")

unique(p195_CPUE$Speciescommonname)
##Filter datasets: to note- add back in Sedsize and Btmcomp once this is fixed! and add back in secchi, don't know if Depthstart is actual depth but called it this in P195 
p915_CPUEedt <- p915_CPUE %>% select(-...1, -Obs, -Weather, -Winddir, -Windspd, -Sedsize, -Btmcomp, -doy, -Wbdytype, -Wbd, -Sample, -Sedsize_new, -Btmcomp_new, -Secchi) %>% filter(Speciescommonname %in% c("atlantic croaker", "black drum", "red drum", "southern flounder", "southern kingfish", "striped bass", "bonnethead hammerhead", "sheepshead")) %>% filter(Year >= 2008) %>% rename("Location" = "Area", "Strata/station"= "Strata", "Depthzone"= "Quad") #added in species of focus for now (still waiting on data)
p120_CPUEedt <- p120_CPUE %>% filter(Core== 1|Core==2) %>% select(-...1, -Program, -Nbrrec3, -Time, -Duration, -doy, -Core, -Sedsize, -Secchi) %>% filter(Year >= 2008) %>% rename("Strata/station"= "Station") %>% mutate(Depthzone= "Constant") #still don't have btmcomp or sedsize 
p195_CPUEedt <- p195_CPUE %>% select(-...1, -Timestart, -Duration, -Depthend, -Wbdytype, -Wbd, -Speciesscientificname, -Sedsize_new, -Btmcomp_new) %>% rename("Ssal" = "Salinitysurface", "Bsal"= "Salinitybottom", "Stemp"= "Tempsurface", "Btemp"= "Tempbottom", "Latitude"= "Latitudestart", "Longitude"= "Longitudestart", "Colnum"= "Numbertotal", "Control1"= "Eventname", "Strata/station"= "Stationcode", "Depth"= "Depthstart") %>% filter(Year >= 2008)
p195_CPUEedt$Depthzone[p195_CPUEedt$Depthzone %in% NA] <- "Constant"

colnames(p915_CPUEedt)
colnames(p120_CPUEedt) #only difference: Sedsize vs. Sedsize_new and BtmComp vs. Btmcomp_new
colnames(p195_CPUEedt)

column_diff <- setdiff(names(p120_CPUEedt), names(p195_CPUEedt))

##Get rid of NAs
summary(is.na(p915_CPUEedt)) #No NAs where it doesn't make sense
summary(is.na(p120_CPUEedt)) #Almost no NAs in general
summary(is.na(p195_CPUEedt)) #A good amount of NAs for Sedsize_new and Btmcomp_new b/c isn't greater than 2008 

p915_CPUEedt <- p915_CPUEedt %>% drop_na() #drops 6914 data points
p915_CPUEedt$Survey <- "P915"
p120_CPUEedt <- p120_CPUEedt %>% drop_na() #drops 564 data points 
p120_CPUEedt$Survey <- "P120"
p195_CPUEedt <- p195_CPUEedt %>% drop_na() #drops 1137 data points 
p195_CPUEedt$Survey <- "P195"
```

#### Grid coordinates:

```{r}
#Add grid cells in 
p915_latlon <- p915_CPUEedt %>% select(Latitude, Longitude) %>% mutate(lat_lon = paste(Latitude, Longitude, sep= "_"))
p120_latlon <- p120_CPUEedt %>% select(Latitude, Longitude) %>% mutate(lat_lon = paste(Latitude, Longitude, sep= "_"))
p195_latlon <- p195_CPUEedt %>% select(Latitude, Longitude) %>% mutate(lat_lon = paste(Latitude, Longitude, sep= "_"))

lat_lon_combo <- rbind(p915_latlon, p120_latlon, p195_latlon)
lat_lon_combo <- lat_lon_combo %>% distinct(lat_lon, .keep_all= TRUE) 

world <- ne_countries(scale = "medium", returnclass = "sf")
# make an object the size and shape of the output you want
globe_bb <- matrix(c(-78.900147,33.802938,
                      -78.900147,36.672128,
                      -75.263672,36.672128,
                     -75.263672, 33.802938,
                     -78.900147,33.802938), byrow = TRUE, ncol = 2) %>% list() %>% st_polygon() %>% st_sfc(., crs = 4326)

globe_grid_30 <- st_make_grid(x= globe_bb, n = c(30,30), crs = 4326, what = 'polygons') %>% st_sf('geometry' = ., data.frame('ID' = 1:length(.))) #grid is 0.13째 by 0.13째 (14.4 km)

degrees_per_km = 1/111.0 #1 degree is 111 km 
degress <- 14.4*degrees_per_km #0.129
distance_km <- 14.4
degrees <- distance_km * 111

#ggplot(data = world) + geom_sf() + geom_sf(data = globe_grid_30, fill = NA) + coord_sf(xlim=c(-85, -70), ylim=c(25,40), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + geom_point(data = lat_lon_combo2, aes(x = Longitude, y = Latitude, color= Survey), size = .2) + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE)

fish_spat <- as.data.frame(lat_lon_combo)
fish_spat$rowID <- 1:nrow(fish_spat)

coordinates(fish_spat) <- ~ Longitude + Latitude
fish_spat <- st_as_sf(fish_spat)
fish_spat <- st_set_crs(fish_spat, 4326)
grid <- globe_grid_30

fish_extract <- st_intersection(fish_spat, grid)
fish_extract_2 <- as.data.frame(fish_extract)

#Group to get rid of duplicates (there are times when a point is overlapping two grid cells)
fish_extract_2_2 <- fish_extract_2[!duplicated(fish_extract_2[c("rowID")]),] #this should be the same size as fish spat, it is 5 observations less, thinking this is bc a few datapoints might be outside of grid cells, didn't change in size from fish_extract_2
fish_extract_2_2$gridID <- fish_extract_2_2$ID
fish_extract_2_2edt <- fish_extract_2_2[,-c(2,3, 4)]

unique(fish_extract_2_2edt$gridID)
#write.csv(fish_extract_2_2edt, "~/Documents/GitHub/NCBlueCrab_Predators/Data/SDM.grids.csv") #updated on 08/01/23
```

#### Coords: Predictor variables

```{r}
#Load predictor variable datasets
setwd("~/Documents/GitHub/NCBlueCrab_Predators/Data/Predictor_variables")
inlet_coords <- st_read("Inlet.points.kml")
coords2 <- st_coordinates(inlet_coords)
inlet_coords$Latitude <- coords2[, "Y"]
inlet_coords$Longitude <- coords2[, "X"]
inlet_coords <- inlet_coords %>% select(-Description)
inlet_coords <- st_transform(inlet_coords) #NC CRS
st_crs(inlet_coords)
SAV_08 <- st_read("SAV/SAV_2006_2008/SAV_2006-2008_Mapping_Revised.shp") #WGS 84/ Pseudo-Mercator
st_crs(SAV_08) #Web Mercator: standard for Web mapping applications, EPSG: 3857, uses spherical over ellipsoidal, projection is slightly non-conformal (angles b/w lines on surface aren't drawn to same angles in map), not normally used for maps of local areas so accuracy of positions needed for splitting is less than angular deviation caused by using spherical formulas 

#Add in other metrics to coordinates
##Distance to inlet 
coords_survey <- rbind(p915_CPUEedt %>% select(Latitude, Longitude, Survey, Year), p120_CPUEedt %>% select(Latitude, Longitude, Survey, Year), p195_CPUEedt %>% select(Latitude, Longitude, Survey, Year))
coords_surveyedt <- coords_survey %>% select(-Survey, -Year) %>% distinct(Latitude, Longitude, .keep_all= TRUE) 
coords_surveysf <- st_as_sf(coords_surveyedt, coords= c("Longitude", "Latitude"), crs= 4326)
coords_inlet_nearest <- st_nearest_feature(coords_surveysf, inlet_coords)
dist_inlets = st_distance(coords_surveysf, inlet_coords[coords_inlet_nearest,], by_element=TRUE)
dist_inlets <- as.numeric(dist_inlets)
coords_surveysf_edt <- coords_surveysf %>% mutate(dist_inlets= dist_inlets)

coords2 <- st_coordinates(coords_surveysf)
coords_surveysf_edt$Latitude <- coords2[, "Y"]
coords_surveysf_edt$Longitude <- coords2[, "X"]
coords_surveysf_edt$lat_lon <- paste(coords_surveysf_edt$Latitude,coords_surveysf_edt$Longitude, sep = "_") 
coords_survey$lat_lon <- coords_survey$lat_lon <- paste(coords_survey$Latitude, coords_survey$Longitude, sep = "_") 
coords_survey_tojoin <- coords_survey %>% select(-Survey) %>% left_join(coords_surveysf_edt %>% select(lat_lon, dist_inlets), by= "lat_lon") %>% select(-geometry)

ggplot(data= world) + geom_sf() + geom_point(data= coords_survey_tojoin[1000:2000,], aes(x= Longitude, y= Latitude, color= dist_inlets)) + geom_point(data= inlet_coords, aes(x= Longitude, y= Latitude)) + coord_sf(xlim=c(-78, -75), ylim=c(33,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + labs(x= "Longitude", y= "Latitude") + scale_color_viridis() #it works! just need to do it with less data 

##Distance to SAV: go to QGIS with coords_survey_tojoin! 
write.csv(coords_survey_tojoin, "coords_survey_tojoin.csv")



##Join predictors, gridded, and CPUE datasets
###Predictors with gridID
predictors_df$lat_lon <- paste(predictors_df$Latitude, predictors_df$Longitude, sep = "_") 
predictors_df_edt <- st_drop_geometry(predictors_df)
gridded_coords <- read.csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/SDM.grids.csv")
predictors_gridded <- predictors_df_edt %>% left_join(gridded_coords, by= "lat_lon") %>% select(lat_lon, gridID, dist_inlets, Wbd, Wbd_type)
write.csv(predictors_gridded,"~/Documents/GitHub/NCBlueCrab_Predators/Data/Predictor_variables/predictors_gridded.csv") #updated on 08/03/23

###Predictors and gridID with gridID geometry
pred_gridd_geom <- predictors_gridded %>% left_join(globe_grid_30 %>% rename("gridID"= "ID"), by= "gridID")
pred_gridd_geom <- st_as_sf(pred_gridd_geom)

#ggplot(data = world) + geom_sf() + geom_sf(data =pred_gridd_geom, fill = NA) + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + standard_theme + geom_point(data = lat_lon_combo2, aes(x = Longitude, y = Latitude, color= Survey), size = .2) 

###Predictors with CPUE data
CPUE_dfs <- rbind(p915_CPUEedt, p195_CPUEedt, p120_CPUEedt)
CPUE_dfs$lat_lon <- paste(CPUE_dfs$Latitude, CPUE_dfs$Longitude, sep = "_") 
CPUE_dfs_gridded <- CPUE_dfs %>% left_join(pred_gridd_geom, by= "lat_lon")
length(unique(CPUE_dfs$lat_lon))
length(unique(pred_gridd_geom$lat_lon))
CPUE_dfs_gridded_final <- CPUE_dfs_gridded %>% drop_na() %>% select(-geometry) #remove 66 rows (49 for NA in gridID and 17 for removing Tar River Wbd)

#Redo this to the old one 

#write.csv(CPUE_dfs_gridded_final, "~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE_dfs_gridded_final.csv")
```

#### Overlap: grids

```{r}
CPUE_dfs_gridded_final <- read.csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE_dfs_gridded_final.csv", sep= ",")
overlap_t <- CPUE_dfs_gridded_final

#Overlapping grid IDs
##In general
gridID_count <- overlap_t %>% filter(Colnum > 0) %>% group_by(Survey, gridID) %>% summarize(count = n()) 

p915_overlap_gridID <- overlap_t %>% select(gridID, Survey, Year) %>% filter(Survey %in% "P915") %>% group_by(Year) %>% distinct(gridID, .keep_all= TRUE) %>% select(gridID, Year)
p120_overlap_gridID <- overlap_t %>% select(gridID, Survey, Year) %>% filter(Survey %in% "P120") %>% group_by(Year) %>% distinct(gridID, .keep_all= TRUE) %>% select(gridID, Year)
p195_overlap_gridID <- overlap_t %>% select(gridID, Survey, Year) %>% filter(Survey %in% "P195") %>% group_by(Year) %>% distinct(gridID, .keep_all= TRUE) %>% select(gridID, Year)

library(plyr)
match_df(p915_overlap_gridID, p120_overlap_gridID, on = NULL)
match_df(p915_overlap_gridID, p195_overlap_gridID, on = NULL)
match_df(p195_overlap_gridID, p120_overlap_gridID, on = NULL) 

##Positive, positive
spp_names <- unique(subset(overlap_t, Survey %in% "P915")$Speciescommonname)
P915_total_spp <- list()
P915_total_gridID <- list()
P120_total_gridID <- list()
match_df <- list()
library(plyr)
library(dplyr)
for(i in spp_names) {
P915_total_spp[[i]] <- overlap_t %>% filter(Survey %in% "P915", Speciescommonname %in% i, Colnum > 0)
P915_total_gridID[[i]] <- P915_total_spp[[i]] %>% dplyr::select(gridID, Month, Speciescommonname, Year) %>% group_by(Month, Year, Speciescommonname) %>% distinct(gridID, .keep_all= TRUE)
P120_bc <- overlap_t %>% filter(Survey %in% "P120", Speciescommonname %in% "blue crab", Colnum > 0)
P120_bc_gridID <- P120_bc %>% dplyr::select(gridID, Month, Speciescommonname, Year) %>% group_by(Month, Year, Speciescommonname) %>% distinct(gridID, .keep_all= TRUE)
match_df[[i]] <- match_df(P915_total_gridID[[i]], P120_bc_gridID, on = c("gridID", "Month", "Year")) 
}

detach(package:plyr)
library(dplyr)
match_data2 <- as.data.frame(do.call(rbind, match_df)) 
match_data2 <- match_data2 %>% group_by(Speciescommonname, Month, Year) %>% dplyr::mutate(count= n())

match_data2 %>% filter(Month== 6) %>% ggplot() + geom_histogram(aes(x= Year)) + facet_wrap(~Speciescommonname) + standard_theme


spp_names_trawl <- unique(subset(overlap_t, Survey %in% "P120")$Speciescommonname)

P915_total_spp <- list()
P915_total_gridID <- list()
P120_total_spp <- list()
P120_total_gridID <- list()
match_df <- list()
all_match_df <- list()

for (i in spp_names) {
  P915_total_spp[[i]] <- overlap_t %>%
    filter(Survey %in% "P915", Speciescommonname %in% i, Colnum > 0, Month== 6) %>%
    drop_na(Colnum)
  
  P915_total_gridID[[i]] <- P915_total_spp[[i]] %>%
    dplyr::select(gridID, Month, Speciescommonname, Year) %>%
    group_by(Month, Year, Speciescommonname) %>%
    distinct(gridID, .keep_all = TRUE)
  
  match_df[[i]] <- list()  # Initialize an empty list for each species in spp_names
  for (j in spp_names_trawl) {
    P120_total_spp[[j]] <- overlap_t %>%
      filter(Survey %in% "P120", Speciescommonname %in% j, Colnum > 0, Month==6) %>%
      drop_na(Colnum)
    
    P120_total_gridID[[j]] <- P120_total_spp[[j]] %>%
      dplyr::select(gridID, Month, Speciescommonname, Year) %>%
      group_by(Month, Year, Speciescommonname) %>%
      distinct(gridID, .keep_all = TRUE)
    
  #  match_df[[i]][[j]] <- match_df(P915_total_gridID[[i]], #P120_total_gridID[[j]], on = c("gridID", "Season", "Year")) 
    match_df[[i]][[j]] <- inner_join(P915_total_gridID[[i]], P120_total_gridID[[j]], by = c("gridID", "Month", "Year")) %>%
      dplyr::select(Speciescommonname.y, everything())
  }
   all_match_df[[i]] <- bind_rows(match_df[[i]]) #combine match_df[[i]][[j]] into data frames for each predator
}

detach(package:plyr)
final_combo <- bind_rows(all_match_df)
final_combo_n_yr <- final_combo %>% group_by(Year, Speciescommonname.x, Speciescommonname.y) %>% mutate(count= n()) %>% distinct(count, .keep_all= TRUE) %>% select(-gridID)
final_combo_n <- final_combo %>% group_by(Speciescommonname.x, Speciescommonname.y) %>% mutate(count= n()) %>% distinct(count, .keep_all= TRUE) %>% select(-gridID, -Year)

```

#### Outlier analysis: changes here reflected in saved CPUE_dfs_gridded_final analysis

```{r}
CPUE_dfs_gridded_final <- read.csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE_dfs_gridded_final.csv")

colnames(CPUE_dfs_gridded_final)
cn <- c("Year", "Month", "Day", "Depth", "Ssal", "Bsal", "Stemp", "Btemp", "Sdo", "Bdo", "Colnum", "dist_inlets")
t <- list()
for(col in cn){
t[[col]] <- CPUE_dfs_gridded_final %>% identify_outliers(col) %>% filter(is.extreme== TRUE) %>% select(col, is.extreme, Speciescommonname)
}
```

In general, there were not many extreme outliers throughout the datasets. There were no extreme outliers for year, month, day, ssal, bsal, stemp, btemp, sdo, and bdo columns. There were 3,410 extreme outliers for the Depth column. Keep in mind, at the time of this outlier analysis (08/02/23), the issues with P195 Depthend and Depthstart hadn't been resolved. The minimum depth was 0.1 and the maximum was 8.8 meters. The only watersheds that had water depth over 7 meters were New River, Pamlico River, and Pamlico Sound. Based on briefly examining the maxinimum depth for water bodies, I think this might be plausible. For Colnum, there were around 14,000 extreme outliers with a maximum Colnum of 9006. As the species with extreme outliers for this category are commonly caught in the estuary (atlantic croaker, black drum, blue crab, spot, etc.), I feel comfortable with retaining these outliers. Lastly, there were 17 rows of extreme outliers for distance to nearest inlet, all within the Tar River Reservoir-Tar River. I decided to remove these from the analysis (but this in above code) due to the distance from water bodies of focus.

#### CPUE calculation

```{r}
CPUE_dfs_gridded_final <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/CPUE_dfs_gridded_final.csv")

#Effort by survey: this works 
CPUE_grid <- CPUE_dfs_gridded_final %>% mutate("Effort"= ifelse(Survey %in% "P120", 1, ifelse(Survey %in% "P195", 20, ifelse(Survey %in% "P915" & Location == "CAPEF" & Month %in% c(04, 05, 06, 07, 08, 09), 240, ifelse(Survey %in% "P915" & Location == "NEWR" & Month %in% c(04, 05, 06, 07, 08, 09), 240, 720))))) #P120: 1 minute tows, P195: 20 minute tows, P915: 240 minute soak time for rivers from April to September and 720 soak time everything else 

#CPUE by row: since you assigned effort correctly, this will work as it should 
CPUE_grid$CPUE <- CPUE_grid$Colnum/CPUE_grid$Effort
CPUE_grid <- CPUE_grid %>% group_by(Survey) %>% mutate(CPUE_stdzd= normalize(CPUE, method= "range", range= c(0,1))) ##min-max scaling:

ggplot() + geom_histogram(data= CPUE_grid, aes(x= CPUE)) + standard_theme + facet_wrap(~Survey, scales= "free") #CPUEs from surveys don't seem that different (need to standardize)

abund_bc <- CPUE_grid %>% filter(Speciescommonname %in% "blue crab") %>% group_by(gridID, Survey) %>% mutate(mean_CPUE = mean(CPUE), mean_CPUE_stdzd= mean(CPUE_stdzd)) %>% distinct(mean_CPUE, .keep_all= TRUE)

#ggplot(data = world) + geom_sf() + geom_sf(data=pred_gridd_geom, fill = NA) + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + standard_theme + #geom_point(data = subset(abund_bc,Survey %in% "P120"), aes(x = Longitude, y = Latitude, color= mean_CPUE), size = 1) + facet_wrap(~Survey) + scale_color_viridis_c(option = "D")

#Number of observations for species of interest: to note- when I redid this (08/06/23), I included bonnethead hammerhead and blue catfish just to look at the #s
interest_spp <- c("brown shrimp", "bluefish", "atlantic croaker", "southern flounder", "red drum", "black drum", "blue catfish", "gizzard shad", "american shad", "cownose ray", "blue crab", "atlantic menhaden", "spot", "summer flounder", "shads", "american eel")

p195_nums <- p195_CPUEedt %>% filter(Year > 2008, Speciescommonname %in% interest_spp) %>% group_by(Speciescommonname, Month) %>% summarise(Sum_colnum= sum(Colnum)) %>% mutate(Survey= "P195") 

p120_nums <- p120_CPUEedt %>% filter(Year > 2008, Speciescommonname %in% interest_spp, Month == 5| Month==6) %>% group_by(Speciescommonname, Month) %>% drop_na(Colnum) %>% summarise(Sum_colnum= sum(Colnum)) %>% mutate(Survey= "P120") 

p915_nums <- p915_CPUEedt %>% filter(Year > 2008, Month == 5| Month==6| Month==9) %>% group_by(Speciescommonname, Month) %>% drop_na(Colnum) %>% summarise(Sum_colnum= sum(Colnum)) %>% mutate(Survey= "P915")

combo <- rbind(p195_nums, p120_nums, p915_nums)
combo <- combo %>% arrange(Speciescommonname, Month)
write.csv(combo, "~/Desktop/seasonality.csv")
```

#### CPUE visualization

```{r}
ss_survey_vis <- function(test, species, test2, species2, test3, species3){
ggplot() + geom_sf(data = world) + geom_point(data = subset(abund, abund$Survey %in% test & abund$Speciescommonname %in% species & Colnum > 0), aes(x = Longitude, y = Latitude, size= mean_CPUE_stdzd), colour= "dark green") + geom_point(data = subset(abund, abund$Survey %in% test2 & abund$Speciescommonname %in% species2 & Colnum > 0), aes(x = Longitude, y = Latitude, size= mean_CPUE_stdzd), colour= "light green") + geom_point(data = subset(abund, abund$Survey %in% test3 & abund$Speciescommonname %in% species3 & Colnum > 0), aes(x = Longitude, y = Latitude, size= mean_CPUE_stdzd), colour= "yellow") + scale_size_area() + coord_sf(xlim=c(-78, -75), ylim=c(34,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + scale_colour_discrete(name = "Species") + labs(size= "Average std. CPUE")
}

ss_survey_vis("P915", "atlantic croaker", "P120", "blue crab", "P195", "blue crab")   
ggsave("/Users/sallydowd/Desktop/atlantic.croaker.jpeg", width= 7, height= 5)

ss_survey_vis("P915", "striped bass", "P120", "adult blue crab", "P195", "adult blue crab")    
ss_survey_vis("P915", "striped bass", "P120", "blue crab", "P195", "blue crab") 
ss_survey_vis("P915", "striped bass", "P120", "atlantic menhaden", "P195", "atlantic menhaden") #striped bass: associated w/ atlantic menhaden and blue crab

ss_survey_vis("P915", "black drum", "P120", "adult blue crab", "P195", "adult blue crab")    
ss_survey_vis("P915", "black drum", "P120", "blue crab", "P195", "blue crab") 
ss_survey_vis("P915", "black drum", "P120", "atlantic menhaden", "P195", "brown shrimp")

ss_survey_vis("P915", "red drum", "P120", "adult blue crab", "P195", "adult blue crab")    
ss_survey_vis("P915", "red drum", "P120", "blue crab", "P195", "blue crab") 
ss_survey_vis("P915", "red drum", "P120", "atlantic menhaden", "P195", "atlantic menhaden") #hypothesis from Plumlee's work

ss_survey_vis("P915", "southern flounder", "P120", "adult blue crab", "P195", "adult blue crab")    
ss_survey_vis("P915", "southern flounder", "P120", "blue crab", "P195", "blue crab")   
ss_survey_vis("P915", "southern flounder", "P120", "spot", "P195", "spot")
ggsave("/Users/sallydowd/Desktop/southern.flounder.spot.jpeg", width= 7, height=5)
ss_survey_vis("P915", "southern flounder", "P120", "atlantic croaker", "P195", "atlantic croaker") #associated w/ spot and atlantic croaker 


ss_survey_vis("P915", "southern kingfish", "P120", "blue crab", "P195", "blue crab")    
ggsave("/Users/sallydowd/Desktop/southern.kingfish.jpeg", width= 7, height= 5)
ss_survey_vis("P915", "southern kingfish", "P120", "southern kingfish", "P195", "southern kingfish")   

ss_survey_vis("P915", "sheepshead", "P120", "adult blue crab", "P195", "adult blue crab")    
ss_survey_vis("P915", "sheepshead", "P120", "blue crab", "P195", "blue crab")   

#bonnetheads: include figure in Survey_overlap

unique(abund$Speciescommonname)


abund <- CPUE_grid %>% group_by(gridID, Survey, Speciescommonname) %>% mutate(mean_CPUE = mean(CPUE), mean_CPUE_stdzd= mean(CPUE_stdzd)) %>% distinct(mean_CPUE, .keep_all= TRUE)

#ggplot(data = world) + geom_sf() + geom_sf(data=pred_gridd_geom, fill = NA) + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + standard_theme + #geom_point(data = subset(abund_bc,Survey %in% "P120"), aes(x = Longitude, y = Latitude, color= mean_CPUE), size = 1) + facet_wrap(~Survey) + scale_color_viridis_c(option = "D")


p195_CPUEedt



```

#### Grid: Predictor variables

```{r}
##Add grid geometry in to CPUE dataset 
globe_grid_30edt <- globe_grid_30 %>% rename("gridID"= "ID", "geometry2" = "geometry")
CPUE_grid_edt <- CPUE_grid %>% left_join(globe_grid_30edt, by= "gridID") %>% filter(Month == 6) %>% rename("geometry"= "geometry2")

##For each year and gridID for the month of June, average all environmental variables (should do this by survey or have all information available in grid cell?)
library(dplyr)
CPUE_grid_avg <- CPUE_grid_edt %>% group_by(Year, gridID) %>% mutate(avg_depth= mean(Depth), avg_ssal= mean(Ssal), avg_bsal= mean(Bsal), avg_stemp= mean(Stemp), avg_btemp= mean(Btemp), avg_sdo= mean(Sdo), avg_bdo= mean(Bdo), avg_dist_inlets= mean(dist_inlets), avg_latitude= mean(Latitude), avg_longitude= mean(Longitude), avg_photoperiod= mean(Photoperiod))

summary(is.na(CPUE_grid_edt))


CPUE_grid_avgsp <- CPUE_grid_avg %>% group_by(Speciescommonname, Year, gridID, Survey) %>% mutate(CPUE_avgspyrgrid_stdzd= mean(CPUE_stdzd)) %>% distinct(CPUE_avgspyrgrid_stdzd, .keep_all = TRUE) %>% group_by(Speciescommonname, Year, gridID, Survey) %>% distinct() 

t <- nrow(CPUE_grid_avgsp %>% filter(Speciescommonname %in% "red drum", Survey %in% "P915"))
length(unique(t$Control1))
t2 <- nrow(CPUE_grid_avgsp %>% filter(Speciescommonname %in% "striped bass", Survey %in% "P915"))
length(unique(t2$Control1))

t <- CPUE_grid_avg %>% filter(Survey %in% "P915") %>%
  group_by(Speciescommonname, Year, gridID) %>%
  summarise(CPUE_avgspyrgrid_stdzd = mean(CPUE_stdzd)) %>%
  spread(Speciescommonname, CPUE_avgspyrgrid_stdzd)

#2008, 46




t <- CPUE_grid_avgsp %>% filter(Speciescommonname %in% "red drum", Survey %in% "P915")
length(unique(t$Control1))
t2 <- CPUE_grid_avgsp %>% filter(Survey %in% "P915")
length(unique(t2$Speciescommonname))





##Center of grid cell
library(rgeos)
centroids <- st_centroid(pred_gridd_geom) #centroid size is determined by nature of geometries you are working with 
coords2 <- st_coordinates(centroids)
centroids$Latitude <- coords2[, "Y"]
centroids$Longitude <- coords2[, "X"]

ggplot(data= world) + geom_sf() + geom_sf(data=subset(pred_gridd_geom, gridID==288), fill = NA) + geom_sf(data= centroids, aes(x= Latitude, y= Longitude), color= "red") + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black")) + standard_theme 

yep <- CPUE_grid_edt %>% group_by(gridID) %>% distinct(Wbd)

length(unique(yep$gridID))

?gCentroid()
#Find waterbody and waterbodytype for grid cell 
unique(CPUE_grid_avgsp$geometry)

##For the month of June: average of all environmental variables for the gridcell, CPUE average for each species

help.search("centroid")


```

##TEST GAMs

```{r}
#
CB_df <- read.csv("/Users/sallydowd/Desktop/P120Counts1972PresentStandardizedSimplified.csv")

CPUE_to_run <- CPUE_grid_avgsp %>% select(-Day, -Sciname, -Effort, -CPUE, -Depth, -Ssal, -Bsal, -Stemp, -Btemp, -Sdo, -Bdo, -Colnum, -Month, -Control1, -Depthzone, -Season, -Latitude, -Longitude, -"Strata/station", -Location, -Date, -Ym_date, -Photoperiod, -geometry, -CPUE_stdzd)





t <- CPUE_to_run %>% pivot_longer(names_to = "Speciescommonname", values_to = "CPUE_avgspyrgrid_stdzd", cols= everything())
pivot_wider
colnames(CPUE_to_run)


t <- CPUE_to_run %>% filter(Survey %in% "P915") %>% pivot_wider(names_from = "Speciescommonname", values_from = "CPUE_avgspyrgrid_stdzd")

%>% pivot_wider(names_from = "CPUE_avgspyrgrid_stdzd", values_from = "Speciescommonname")



```
