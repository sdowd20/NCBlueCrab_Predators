---
title: "Predictor_calcs"
format: html
editor: visual
---

#### Load packages & fncs

```{r}
#Load packages and functions 
packages <- c("ggplot2", "tidyverse", "lubridate", "sf", "sp", "dplyr", "rnaturalearth", "readr", "readxl", "spatialEco", "rstatix", "viridis", "BBmisc", "corrplot")
invisible(lapply(packages, library, character.only= TRUE))

standard_theme <- theme_bw() + theme(panel.border = element_rect(fill=NA, colour = "black")) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.text.align= 0, legend.title= element_text(size = 12), legend.text = element_text(size= 10), axis.text=element_text(size=10), axis.title=element_text(size=12))
```

#### Load gridded datasets
```{r}
#Background grid
globe_bb <- matrix(c(-78.900147,33.802938,
                      -78.900147,36.672128,
                      -75.263672,36.672128,
                     -75.263672, 33.802938,
                     -78.900147,33.802938), byrow = TRUE, ncol = 2) %>% list() %>% st_polygon() %>% st_sfc(., crs = 4326)
globe_grid_30 <- st_make_grid(x= globe_bb, n = c(30,30), crs = 4326, what = 'polygons') %>% st_sf('geometry' = ., data.frame('ID' = 1:length(.)))


```

```{r}
#10 km 
gridded_coords <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/gridded_11.20.23.csv")
gridded_coords <- gridded_coords %>% separate(lat_lon, into = c("Latitude", "Longitude"), sep = "_", convert = TRUE) %>% dplyr::select(-...1)

#Join grid geometry to gridded dataset
globe_grid_30_edt <- globe_grid_30 %>% rename("gridID"= "ID")
gridded_coords_geom <- gridded_coords %>% left_join(globe_grid_30_edt, by= "gridID")
gridded_coords_geom_edt <- gridded_coords_geom %>% distinct(gridID, .keep_all= TRUE) %>% dplyr::select(gridID, geometry)
grid10km <- st_as_sf(gridded_coords_geom_edt)
  
#5 km 
gridded_coords1 <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/gridded_10.02.23.5km.csv")
gridded_coords <- gridded_coords1 %>% separate(lat_lon, into = c("Latitude", "Longitude"), sep = "_", convert = TRUE) %>% dplyr::select(-...1)
globe_grid_60_edt <- globe_grid_30 %>% rename("gridID"= "ID")
gridded_coords_geom <- gridded_coords %>% left_join(globe_grid_60_edt, by= "gridID")
gridded_coords_geom_edt <- gridded_coords_geom %>% distinct(gridID, .keep_all= TRUE) %>% dplyr::select(gridID, geometry)
grid <- st_as_sf(gridded_coords_geom_edt)

ggplot(data = world) + geom_sf() + geom_sf(data = grid) + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE) + theme(panel.background = element_rect(fill = "white", colour = "black"))  + standard_theme #+geom_point(data= gridded_coords, aes(x= Longitude, y= Latitude), color= "red")
```

#### Load predictor datasets

```{r}
setwd("~/Documents/GitHub/NCBlueCrab_Predators/Data/Predictor_variables/QGIS_layers")
Inlet_coords <- st_read("Environmental/Inlet.points.kml")
DPA_a <- read_sf(dsn = "Fishing/Allowed", layer = "DPA_a")
GillPound_p <- read_sf(dsn = "Fishing/Restricted", layer = "GillPound_p")
RestrictedArea <- read_sf(dsn = "Fishing/Restricted", layer = "RestrictedArea")
ShrimpTrawl_p <- read_sf(dsn = "Fishing/Restricted", layer = "ShrimpTrawl_p")
TrawlDredge_p <- read_sf(dsn = "Fishing/Restricted", layer = "TrawlingDredging_p")
ITP_Management <- read_sf(dsn = "Fishing", layer = "ITPMangamenet")

setwd("/Users/sallydowd/Desktop/Ch1Data")
SAV <- read_sf(dsn= "QGIS_layers", layer= "SAV_Mosaic_1981_to_2015")
SAV2 <- read_sf(dsn= "QGIS_layers", layer= "SAV_2006-2008_Mapping_Revised")
Estuarine_shoreline <- read_sf(dsn="QGIS_layers", layer= "Estuarine_Shoreline") 
All_waterbodies <- read_sf(dsn= "QGIS_layers", layer= "All_waterbodies")
```

##### CRS Check

```{r}
st_crs(Inlet_coords) #WGS 84
st_crs(DPA_a) #EPSG 32119
st_crs(GillPound_p) #EPSG 6542
st_crs(RestrictedArea) #EPSG 32119
st_crs(ShrimpTrawl_p) #EPSG 32119
st_crs(TrawlDredge_p) #EPSG 32119
st_crs(ITP_Management) #EPSG 32119
st_crs(SAV) #EPSG 3857
st_crs(Estuarine_shoreline) #EPSG 3857
st_crs(All_waterbodies) #EPSG 3857
st_crs(grid)

Inlet_coords_edt <- st_transform(Inlet_coords, crs = 32119)
GillPound_p_edt <- st_transform(GillPound_p, crs = 32119)
SAV_edt <- st_transform(SAV, crs = 32119)
SAV2_edt <- st_transform(SAV2, crs = 32119)
Estuarine_shoreline_edt <- st_transform(Estuarine_shoreline, crs= 32119)
All_waterbodies <- st_transform(All_waterbodies, crs= 32119)
grid10km_edt <- st_transform(grid10km, crs= 32119)
```

##### Visualization Check

```{r}
#Checked the first two and it looked fine 
ggplot(data = world) + geom_sf() + geom_sf(data = globe_grid_30, fill = NA) + theme(panel.background = element_rect(fill = "white", colour = "black")) + geom_sf(data = Inlet_coords_edt) + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE)

ggplot(data = world) + geom_sf() + theme(panel.background = element_rect(fill = "white", colour = "black")) + geom_sf(data = grid) + coord_sf(xlim=c(-78, -75), ylim=c(33.5,37), expand = TRUE) + standard_theme
```

### 10 km^2 

##### Grid: Percent Area Covered

```{r}
#Function: 
# mean(st_area(grid_edt)), this was 29276995 for 5km
mean(st_area(grid10km_edt))
sd(st_area(grid10km_edt))
grid_A <- 117055715/1000000 #area is 10 x 10 km
perc_A <- function(df1, df2){
df_new <- st_intersection(df1, df2) %>% cbind(as.data.frame(st_area(.))) %>% dplyr::select(gridID, st_area..., geometry) %>% mutate(st_area...= as.numeric(st_area...)) %>% group_by(gridID) %>% mutate(st_area_km= st_area.../1000000, sum_area_km2= sum(st_area_km), column= (sum_area_km2/grid_A)*100) %>% distinct(gridID, .keep_all = TRUE) %>% st_drop_geometry()
return(df_new)
}

#Fishing
##Allowed
###Crab pots allowed (open):
DPA_aA <- perc_A(DPA_a, grid10km_edt)
DPA_aA <- grid10km_edt %>% left_join(DPA_aA, by= "gridID") %>% replace(is.na(.), 0) %>% arrange(gridID) %>% st_drop_geometry() %>% dplyr::select(gridID, column) %>% rename("DPA_aA"= "column") %>% mutate(DPA_aA= ifelse(DPA_aA > 100, 100, DPA_aA)) #if it is over 100 (100.02) then make it only 100

###ITP Management Area: Area overlap, take area with largest overlap
ITP <- st_intersection(ITP_Management, grid10km_edt) %>% cbind(as.data.frame(st_area(.))) %>% dplyr::select(gridID, area, st_area...) %>% group_by(gridID) %>% mutate(st_area...= as.numeric(st_area...)) %>% filter(st_area... %in% max(st_area...)) %>% st_drop_geometry() %>% dplyr::select(-st_area...) %>% rename("ITP"= "area")
ITP <- grid10km_edt %>% left_join(ITP, by= "gridID") %>% st_drop_geometry()

##Restricted 
###Shrimp trawling prohibited
ShrimpTrawl_pA <- perc_A(grid10km_edt, ShrimpTrawl_p)
ShrimpTrawl_pA <- grid10km_edt %>% left_join(ShrimpTrawl_pA, by= "gridID") %>% replace(is.na(.), 0) %>% arrange(gridID) %>% st_drop_geometry() %>% dplyr::select(gridID, column) %>% rename("ShrimpTrawl_pA"= "column")

###Trawling, dredging prohibited
TrawlDredge_p_edt <- TrawlDredge_p %>% st_union()
TrawlDredge_pA <- perc_A(grid10km_edt, TrawlDredge_p_edt)
TrawlDredge_pA <- grid10km_edt %>% left_join(TrawlDredge_pA, by= "gridID") %>% replace(is.na(.), 0) %>% arrange(gridID) %>% st_drop_geometry() %>% dplyr::select(gridID, column) %>% rename("TrawlDredge_pA"= "column")

###Passive gear prohibited
GillPound_pA <- perc_A(GillPound_p_edt, grid10km_edt)
GillPound_pA <- grid10km_edt %>% left_join(GillPound_pA, by= "gridID") %>% replace(is.na(.), 0) %>% arrange(gridID) %>% st_drop_geometry() %>% dplyr::select(gridID, column) %>% rename("GillPound_pA"= "column")

###Total restricted area
RestrictedArea_sf <- RestrictedArea %>% st_union()%>%
st_sf() #sf is a sfc geometry that has data columns, sfc only has geometry 
RestrictedArea_pA <- perc_A(RestrictedArea_sf, grid10km_edt)
RestrictedArea_pA <- grid10km_edt %>% left_join(RestrictedArea_pA, by= "gridID") %>% replace(is.na(.), 0) %>% arrange(gridID) %>% st_drop_geometry() %>% dplyr::select(gridID, column) %>% rename("RestrictedArea_pA"= "column")

#Waterbody
Waterbodi <- All_waterbodies %>% st_union()
Waterbody_A <- perc_A(grid10km_edt, Waterbodi) #this worked! QGIS
Waterbody_A <- grid10km_edt %>% left_join(Waterbody_A) %>% replace(is.na(.), 0) %>% arrange(gridID) %>% st_drop_geometry() %>% dplyr::select(gridID, column) %>% rename("Waterbody_A"= "column") %>% mutate(Waterbody_A= ifelse(Waterbody_A > 100, 100, Waterbody_A)) 

Grid_predictors_edt2final <- read_csv("~/Documents/GitHub/NCBlueCrab_Predators/Data/Predictor_variables/gridded_predictors_final.csv")
```

##### Centroid

```{r}
sf_cent <- st_centroid(grid10km_edt)
nearest_dist <- function(df1, df2){
nearest <- st_nearest_feature(df1, df2)
dist <- st_distance(df1, df2[nearest,], by_element= TRUE)
dist <- as.numeric(dist)
df_new <- grid10km_edt %>% mutate(dist_km = dist/1000)
}

#Environmental 
InletDist_km <- nearest_dist(sf_cent, Inlet_coords_edt) %>% rename("InletDist_km"= "dist_km") %>% st_drop_geometry()

##Distance to SAV
options(scipen = 999)
SAV_km <- nearest_dist(sf_cent, SAV2_edt) %>% rename("SAV_km"= "dist_km") %>% st_drop_geometry()
options(scipen = 0)
#These are pretty far off from original calculations, checked habitat mosaic w/ 2006-2008 and were more similar

##Shoreline type
nearest_shoreline <- st_nearest_feature(sf_cent, Estuarine_shoreline_edt)
nearest <- as.numeric(nearest_shoreline)
ShorelineType <- grid10km_edt %>% mutate(row_num= nearest)
ESE <- Estuarine_shoreline_edt %>% mutate(row_num= 1:74937) %>% st_drop_geometry()
ShorelineType <- ShorelineType %>% left_join(ESE, by= "row_num") %>% dplyr::select(gridID, SHORE_NAM) %>% rename("ShorelineType"= "SHORE_NAM") %>% st_drop_geometry() #21 differences in 120 gridIDs in common b/w old dataset and new, might be due to different calculation distances 
```

##### Other calculation

```{r}
#Merge grid and centroid calculated datasets
dataframes <- list(ITP, ShrimpTrawl_pA, TrawlDredge_pA, GillPound_pA, RestrictedArea_pA, Waterbody_A, InletDist_km, SAV_km, ShorelineType)

merged_df <- DPA_aA
for (df in dataframes){
  merged_df <- merge(merged_df, df, by = "gridID")
} #merge dataframes by common columns 

#Most common sediment size 
##Organize datasets: 
datasets_Sedsize <- CPUE_all %>% dplyr::select(Latitude, Longitude, Sedsize_new) %>% drop_na()
datasets_Sedsize$lat_lon <- paste(datasets_Sedsize$Latitude,datasets_Sedsize$Longitude, sep = "_") 
gridded_coords_geom$lat_lon <- paste(gridded_coords_geom$Latitude,gridded_coords_geom$Longitude, sep = "_") 
datasets_Sedsize <- datasets_Sedsize %>% left_join(gridded_coords_geom %>% dplyr::select(gridID, lat_lon), by= "lat_lon") 
Sedsize_common <- datasets_Sedsize %>% group_by(gridID) %>% summarise(Sedsize_common = names(which.max(table(Sedsize_new)))) %>% drop_na(gridID) #only 299 not 340 grid cells 
merged_df2 <- merged_df %>% left_join(Sedsize_common, by= "gridID")

length(unique(CPUE_all$lat_lon))
length(unique(datasets_Sedsize$lat_lon))
length(unique(gridded_coords1$lat_lon))

#Fishing predictors: 
merged_df3 <- merged_df2 %>% mutate(ShrimpTrawl_aA= Waterbody_A - ShrimpTrawl_pA, TrawlDredge_aA = Waterbody_A - TrawlDredge_pA, GillPound_aA = Waterbody_A - GillPound_pA)

merged_df4 <- merged_df3 %>% mutate(FishingAll_num= rowSums(merged_df3[c("ShrimpTrawl_aA", "TrawlDredge_aA", "GillPound_aA", "DPA_aA")] > 0), NoFishRest= Waterbody_A - RestrictedArea_pA, NoFishRest= ifelse(NoFishRest < 0, 100, NoFishRest)) #Max was -6 for NoFishRest, fixed this by putting 0 


#706
#757
#1576
#2165
#2655
#3530

#Manually get rid of gridIDs in QGIS that are outside of study zone 
#write_sf(grid_edt, "~/Desktop/grid_edt.shp")
Grid_predictors_edt2 <- merged_df4 %>% filter(!gridID %in% c(706, 757, 1576, 2165, 2655, 3530, 258))
```

```{r}
#Save as CSV
write.csv(Grid_predictors_edt2, "/Users/sallydowd/Documents/GitHub/NCBlueCrab_Predators/Data/Predictor_variables/grid_predictors_5km.10.03.23.csv")
```
